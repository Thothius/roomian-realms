game.boosting.BoostableCat: {
	conversion: "Conversion",
},
game.boosting.BOOSTABLES: {
	Physics: "Physics",
	PHYSICS_MASS: "Weight",
	PHYSICS_MASS_D: "The Weight of a subject.",
	PHYSICS_STAMINA: "Stamina",
	PHYSICS_STAMINA_D: "How long a subject can walk or run before needing to rest.",
	PHYSICS_SPEED: "Speed",
	PHYSICS_SPEED_D: "The speed of a subject, expressed in tiles per second.",
	PHYSICS_ACCELERATION: "Acceleration",
	PHYSICS_ACCELERATION_D: "How fast a subject speeds up.",
	PHYSICS_HEALTH: "Health",
	PHYSICS_HEALTH_D: "General health of subject. The higher health, the less likely a subject is to contract disease. Values less than 1 might lead to epidemics.",
	PHYSICS_DEATH_AGE: "Lifespan",
	PHYSICS_DEATH_AGE_D: "The maximum amount of years a subject can live for.",
	PHYSICS_RESISTANCE_HOT: "Heat Resistance",
	PHYSICS_RESISTANCE_HOT_D: "The ability for a subject to endure hot temperatures.",
	PHYSICS_RESISTANCE_COLD: "Cold Resistance",
	PHYSICS_RESISTANCE_COLD_D: "The ability for a subject to endure cold temperatures.",
	PHYSICS_SOILING: "Soiling",
	PHYSICS_SOILING_D: "The rate at which a subject becomes dirty.",
	BATTLE_OFFENCE_SKILL: "Offence Skill",
	BATTLE_OFFENCE_SKILL_D: "A soldier's offensive skill determines the ability to land a successful hit on an enemy and evade the enemy's armour.",
	BATTLE_DEFENCE_SKILL: "Defence Skill",
	BATTLE_DEFENCE_SKILL_D: "A soldiers defensive skill is used when attacked frontally to block or dodge an enemy's attack.",
	BATTLE_BLUNT_DAMAGE: "Force",
	BATTLE_BLUNT_DAMAGE_D: "The force of any attack. The force is multiplied on the damage types when attacking. Force also creates knock-back that can disrupt enemy formations and demoralize them.",
	BATTLE_BLUNT_DEFENCE: "Hit Points",
	BATTLE_BLUNT_DEFENCE_D: "Ability to absorb damage.",
	ATTACK_RATE: "Attack Rate",
	ATTACK_RATE_D: "The rate at which a soldier performs melee attacks.",
	BATTLE_MORALE: "Morale",
	BATTLE_MORALE_D: "A soldier's morale is what determines how long, and against what odds and setbacks, it will fight for before taking flight.",
	Battle: "Battle",
	Behaviour: "Behaviour",
	BEHAVIOUR_LAWFULNESS: "Lawfulness",
	BEHAVIOUR_LAWFULNESS_D: "A lawful citizen is one that is reluctant to commit crime.",
	BEHAVIOUR_SUBMISSION: "Submission",
	BEHAVIOUR_SUBMISSION_D: "Submission is useful for slaves. Submissive slaves will be reluctant to revolt and you can mistreat them more.",
	BEHAVIOUR_LOYALTY: "Loyalty",
	BEHAVIOUR_LOYALTY_D: "Increases the Loyalty of your citizens, preventing riots and usurping.",
	BEHAVIOUR_HAPPINESS: "Happiness",
	BEHAVIOUR_HAPPINESS_D: "Increases the happiness of your subjects. Happy subjects will be more loyal and submissive.",
	BEHAVIOUR_SANITY: "Sanity",
	BEHAVIOUR_SANITY_D: "Determines the chance a subject will become deranged during its lifetime.",
	Civic: "Civic",
	CIVIC_MAINTENANCE: "Robustness",
	CIVIC_MAINTENANCE_D: "Decreases the rate at which our buildings degrade.",
	CIVIC_TRADE: "Bartering",
	CIVIC_TRADE_D: "Improves the transport fee for distant trades.",
	CIVIC_SPOILAGE: "Conservation",
	CIVIC_SPOILAGE_D: "Decreases the spoilage rate of goods.",
	CIVIC_ACCIDENT: "Safety",
	CIVIC_ACCIDENT_D: "Decreases the chance of work related accidents.",
	CIVIC_FURNITURE: "Furnishing",
	CIVIC_FURNITURE_D: "Decreases the rate at which subjects use up the furniture of their homes.",
	CIVIC_RAIDING: "Raid Security",
	CIVIC_RAIDING_D: "Determines the chances of us being raided",
	Deflation: "Deflation",
	deflationD: "Decreases the inflation of your treasury, allowing you to save up more.",
	Immigration: "Immigration",
	ImmigrationD: "Increases the replenishment and capacity of the immigration pool.",
	KNOWLEDGE: "Knowledge",
	KNOWLEDGE_D: "Used for technologies.",
	INNOVATION: "Innovation",
	INNOVATION_D: "Used for technologies.",
	EMISSARY: "Emissary Points",
	EMISSARY_D: "Used to manipulate opinions of factions.",
	START_LANDING: "Settle",
	START_LANDING_D: "Increases your starting subjects and resources.",
	CIVIC_LAW: "Law",
	CIVIC_LAW_D: "The law of your city.",
	CIVIC_GOV: "Gov Points",
	CIVIC_GOV_D: "The main currency to build your realm with. Gained by assigning nobles to government duties.",
	Personality: "Personality",
	NOBLE_AGRRESSION: "Aggression",
	NOBLE_AGRRESSION_D: "How much war is liked.",
	NOBLE_PRIDE: "Pride",
	NOBLE_PRIDE_D: "Prideful people put great value in flattery and gifts.",
	NOBLE_HONOR: "Honour",
	NOBLE_HONOR_D: "The value put in pledges and agreements.",
	NOBLE_MERCY: "Mercy",
	NOBLE_MERCY_D: "The inclination towards mercy as opposed to cruelty.",
	NOBLE_COMPETENCE: "Competence",
	NOBLE_COMPETANCE_D: "The general competence.",
	NOBLE_TOLERANCE: "Tolerance",
	NOBLE_TOLERANCE_D: "Tolerance to new and different things.",
},
game.event.actions._BOOST: {
	sTitle: "Boosted Subjects",
},
game.event.actions._CREDITS: {
	tooPoor: "You are too poor to pay this sum.",
},
game.event.actions._INVASION: {
	arrive: "The army of {0} has now arrived.",
},
game.event.actions._RESOURCES: {
	noEnough: "You don't have enough resources available.",
},
game.event.engine.Butt: {
	timeRemaining: "Time Remaining",
},
game.event.engine.EventMessage: {
	active: "This event is no longer relative.",
},
game.events.advice.EventAdvisor: {
	Advice: "Advisor: ",
},
game.events.citizen.EventCitizen: {
	riotWarning: "Ungrateful plebs!",
	riotWarningD: "Rumour has it that your citizens are grinding their teeth in frustration over what they claim is your incompetent rule. If nothing is done in time, a riot might follow! Try to increase their loyalty immediately.",
},
game.events.citizen.EventCitizenEmmigrate: {
	emigration: "Emigrants!",
	emigrationD: "A group of {RACE} have decided to leave your city, renouncing their citizenship, and your rule. This is a sign of weakness. Make sure you increase loyalty so that this will not happen again!",
},
game.events.citizen.EventCitizenRace: {
	title: "Brawls!",
	desc: "A local dispute between a {RACE_A} and {RACE_B} citizen has spread across the whole city. The two species are now at each others throats and fighting each other wherever they meet. We must fix our happiness issues before this spreads any further.",
},
game.events.citizen.EventCitizenRel: {
	title: "War of the faiths",
	descRel: "Due to low happiness, a local dispute between two citizens of opposing faiths has spread across the whole city. Followers of {RELIGION_A} and {RELIGION_B} are now at each others throats and fighting each other wherever they meet. We must fix our happiness issues before this spreads any further.",
	descRel2: "The tension between religious factions have spread. Followers of {RELIGION_A} and {RELIGION_B} are now also at odds, and fighting each other wherever they meet.",
},
game.events.citizen.EventCitizenRiot: {
	riot: "Riot!",
	riotD: "Your subjects have had enough of you and your rule. They have risen up, determined to show their displeasure by murdering and vandalizing. The only way to quell these rebels is by calling in the military, set them to mopping up. Guards will also do their fair share. Riots will also subdue naturally without action in time.",
	amount: "We have reports of {0} rioters. The following species have joined: ",
	success: "The rioters have had a taste of your might and have laid down their arms. The ring leaders will be processed in your justice system and be made an example of.",
	Over: "Riot Over!",
	OverD: "The rioters have had enough of murdering and pillaging for now. They have returned to be law abiding citizens, until they feel it's time again.",
},
game.events.citizen.EventCitizenStrike: {
	strike: "Worker Strike!",
	strikeD: "Your {RACE} workers have halted all work in our {WORKPLACES}, in protest of what they call your bad judgement. Take measures to increase their loyalty so that it doesn't happen again.",
	strikeOver: "Strike Over",
	strikeOverD: "Your {WORKPLACES} have resumed work and the strike is over.",
},
game.events.disaster.EventAccident: {
	Accident: "Accident!",
	AccidentD: "An accident has occurred. {0} subjects were injured and will seek out a hospital. There were {1} deaths.",
	Go: "Go to Site",
},
game.events.disaster.EventDisease: {
	title: "Outbreak!",
	desc: "Dreadful news! On account of poor health and sanitation, an epidemic of {0} has been discovered. Lets hope our hospitals are well staffed. A curfew can be issued to contain it.",
},
game.events.disaster.EventDiseaseMild: {
	titleF: "Disease at our doorstep!",
	descF: "There is rumour that the lands to the east have been ravaged by a deadly disease, leaving cities in ruins and emptying villages of the living. Let us hope it does not reach our lands.",
	title: "Epidemic!",
	desc: "It has come to us. The dreaded {0}. Nothing could have been done, it was the will of the gods. Lets hope our hospitals are well staffed. A curfew can be issued to contain it.",
},
game.events.disaster.EventTemperature: {
	ExtremeTemp: "Extreme Temperatures",
	ExtremeTempHot: "The temperature is rising to an extreme level today. Make sure you have ways for subjects to cool down!",
	ExtremeTempCold: "The temperature has plunged to record lows. Make sure our hearths are stocked with wood.",
},
game.events.faction.EventFactionCollapse: {
	title: "Realm Collapses",
	desc: "Due to internal strife, the realm of {0} has collapsed and much of its lands have been lost.",
	mess: "This might be a good time to expand our kingdom into these lawless lands without diplomatic penalty.",
},
game.events.faction.EventFactionPeace: {
	ally: "Ally Withdraws",
	allyBody: "We, the people of {0}, have had enough bloodshed, and must now withdraw from hostilities to put our efforts into the stability of our kingdom.",
},
game.events.faction.player.Stance: {
	Welcome: "Welcome",
	AgreementCancelled: "Agreement Cancelled.",
	AgreementCancelledD: "This faction has gone from the stance of {0} to the stance of {1}.",
	Warning: "Relations Worsening.",
	WarningD: "This faction is currently your {0}. If their opinion is not raised in time, it is possible they'll cancel this agreement.",
	TradeCancelled: "Agreements Cancelled.",
	TradeCancelledD: "Since the faction of {0} is no longer reachable to us, all agreements have been annulled.",
	title: "Proposal: {0}",
},
game.events.faction.player.Vassal: {
	breakTitle: "Freedom request",
	breakBody: "This faction asks that you release them from their bounds. The faction will become your colleague, and the faction will be very grateful should you accept.",
	joinTitle: "Freedom!",
	joinBody: "This former vassal has has severed all diplomatic relationships with you",
},
game.events.faction.player.War: {
	WarByProxy: "Proxy war!",
	WarByProxyD: "My lord, even in distant places they manage to hate our freedom and way of life. They can not reach us directly, but they have offered their aid to our enemies, bolstering their ranks!.",
	WarByProxyD2: "Our agents reveal that our enemies have managed to increase their armies by {0} soldiers, and were sponsored by the following factions: ",
	War: "War!",
	Crusade: "World War!",
	WarD: "The enemy has shown itself. Let us muster and fight!",
	CrusadeD: "This faction has in secret conspired against you and have convinced other factions to join in on war against you. Now we must defend our freedom and way of life. To arms!",
	CrusadeD2: "The following Factions have joined their cause:",
	Demand: "Demand",
},
game.events.misc.EventSlaver: {
	Slaver: "Slaver!",
	Question: "A slaver has arrived and is offering his goods. Would you like to make a purchase or a sale? He will stay for 4 days to await your payments.",
	Purchase: "Purchase",
	Expired: "Expired",
},
game.events.slave.EventUprising: {
	warningA: "Slave Submission!",
	warningAD: "Slaves are acting a bit out of order lately and submission seems to be low. Perhaps it would be a good thing to free a few to raise their spirits.",
	warning: "Slave Warning!",
	warningD: "Rumour has it that our wretched slaves feel mistreated. Some battlegear has also mysteriously gone missing. Might be a good time to deploy our troops close to the throne, just in case they think of something...",
	riot: "Slave Uprising!",
	riotD: "May the gods help us, the slaves are rising up to their masters! They claim to have had enough of your mistreatment and are now bent on ending your rule. Should they reach the throne, they will part with a good chunk of our riches and resources, and we shall be forever disgraced. Call in the troops and smite them, while there still is time!",
	amount: "{0} slaves have joined the uprising.",
	OverD: "The slave uprising has been defeated and your people rejoice at your might. Time to acquire new ones.",
	Over: "Uprising crushed!",
	LooseD: "The filthy slaves have captured the throne through low cunning. The wretches have plundered our stores and our treasury before deserting their master. May the gods help us through this calamity.",
	Loose: "Slaves triumph!",
},
game.events.world.EventWorldRebellion: {
	Rebellion: "Rebellion!",
	Warning: "Rebellion Imminent!",
	WarningD: "The region of {0} has very low public order, and could rebel any day now. A temporary fix would be to station troops there, deterring the troublemakers, but in the long run, we should look into fixing these problems permanently.",
	RebellionD: "The region of {0} has had enough of your mistreatment and have declared independency from your tyrannical rule.",
	RebellionArmy: "In fact they hate you so much that they have raised an army against you. You better deal with this problem before it spreads.",
},
game.faction.diplomacy.deal.DealBools: {
	ally: "Alliance",
	allyD: "As allies, you will trade at an increased discount, respect each other's sovereignty, and also share your enemies. Armies can move freely in allied territory.",
	pact: "Become Colleagues",
	pactD: "As colleagues, you will trade at an increased discount, and also pledge not attack each other and respect each others sovereignty.",
	peace: "Peace",
	peaceD: "Peace Agreement. Will affect all allies and common enemies.",
	absorb: "Unite",
	absorbD: "The faction, and all of its territory joins you as your own territory.",
	vassal: "Become Vassal",
	vassalD: "You become a vassal to this faction. You will have no diplomatic relations with other factions. You will also pay a 10% tax at the end of each year, and in return you will be protected against attackers.",
	protector: "Become Protector",
	protectorD: "The faction becomes your vassal, and you its protector. At the end of each year you will receive a tribute of your choosing.",
	tradeCancel: "Cancel All Agreements",
	tradeCancelD: "Will cancel all agreements, including trade and make you neutral to each other",
	tradeD: "You and the faction become trade partners, which will allow you to automatically trade at better prices.",
	pWarAlready: "You are already at war.",
	pWarNot: "You are not at war.",
	pOther: "Can not be combined with other proposals.",
	pNoAgree: "You have no agreements to break.",
	pDistance: "This option requires the faction to be your neighbour.",
	pAlready: "You are already at this stance with each other.",
	pOpinion: "You are not liked enough by the faction for this stance to be considered. A minimum opinion of {0} is required.",
	pVassal: "As a vassal, you can not propose this agreement to this faction.",
	pVassalOther: "This faction is a puppet state of another faction, and is not allowed to make this agreement.",
	opReq: "Opinion Required",
	opTarif: "Tariff",
},
game.faction.diplomacy.deal.DealSave: {
	Faction: "The faction of this agreement does no longer exist.",
	You: "You currently do not have the means to fulfill this agreement. ({0})",
	Other: "The faction currently does not have the means to fulfill this agreement.",
},
game.faction.diplomacy.DIP: {
	NEUTRAL: "Neutral",
	NEUTRALD: "No relations at all",
	TRADE: "Trade Partners",
	TRADED: "Trade partners can exchange goods automatically at favourable rates. Requires 1 in opinion to be considered.",
	PACT: "Colleagues",
	PACTD: "A colleague not only trades at a discounted rate, but allow transit through their lands. Requires 2.5 in opinion to be considered.",
	ALLY: "Allies",
	ALLYD: "An ally is your sworn bannerman. You share the same enemies, trade and swear to never question each other's rule. Requires 6 in opinion to be considered.",
	VASSAL: "Vassal",
	VASSALD: "A Vassal serves its overlord with tribute. In return, they are protected.",
	PROTECTOR: "Protector",
	PROTECTORD: "A Protector is the overlord of a vassal. Their task is to protect, and in return they get to enjoy some tribute at the end of each year.",
},
game.faction.diplomacy.DipStance: {
	minOpinion: "Minimum Opinion",
},
game.faction.diplomacy.DWar: {
	name: "Enemies",
	desc: "Enemies are at war and bent on destroying one another.",
},
game.faction.diplomacy.Listener: {
	warDeclared: "The realm of {0} has declared war on {1}.",
	warPeace: "{0} and {1} have agreed to a truce.",
	mTitle: "Distant war.",
	mBody: "One of your neighbours have gone to war. This could be an opportunity to snatch a cheap alliance, or join one of the sides to take part of the spoils.",
	trade: "{FACTION_A} and {FACTION_B} are now trade partners.",
},
game.faction.diplomacy.UpVassal: {
	tribute: "Tribute",
	vassal: "It is time for us to pay our annual tribute to our overlord and protector. We must pay 10% of our net worth.",
	overlord: "Tribute from our loyal subjects has arrived. As always, they are expressing eternal gratitude for your protection. Should we want to increase their opinion of us, we can always decline this offer.",
},
game.faction.FACTIONS: {
	sim: "Simulating factions",
	factionDestroyed: "The faction of {0} has been completely destroyed.",
	newFaction: "A new faction has emerged. They call themselves '{0}'.",
},
game.faction.FBanner: {
	name: "Banner",
},
game.faction.FCredits: {
	Treasury: "Treasury",
	TreasuryD: "The amount of Denari at disposal.",
	Trade: "Trade",
	TradeD: "Money that flow through imports and exports.",
	Inflation: "Inflation",
	InflationD: "Over time, Inflation adds credits to a negative treasury and removes credits from a positive one.",
	Misc: "Misc",
	MiscD: "Special sources",
	Tribute: "Tribute",
	TributeD: "Denari spent/gained from paying off other armies and factions.",
	DiplomacyD: "Denari spent/gained from diplomacy with other factions.",
	Mercenaries: "Mercenaries",
	MercinariesD: "Mercenaries can be conscripted into your armies and cost credits to upkeep each day.",
	Tourism: "Tourism",
	PTourismD: "Tourists that visit your city will give you some money at the end of their stay.",
	Construction: "Construction",
	ConstructionD: "Construction of buildings in your kingdom.",
	Tax: "Tax",
	TaxD: "Taxation from the realm.",
	SlaveD: "Transactions from slave trade.",
},
game.faction.FResources: {
	worn: "Furniture",
	theft: "Theft",
},
game.faction.FWorth: {
	resD: "Worth of stored resources",
	popD: "Worth of population",
	regionD: "Worth of your regions",
	vassals: "Vassals",
	vassalsD: "Worth of your vassals",
	slaves: "Slaves",
	slavesD: "Worth of your slaves",
},
game.faction.player.emmi.Emissaries: {
	name: "Emissary Points",
	desc: "Emissaries are used to influence foreign courts, or to increase support in regions outside of your realm. Emissaries are trained in an embassy, and can be assigned in the faction panel or the region panel.",
	low: "Emissary points Low",
	lowD: "We do no longer employ as many emissaries as are needed. As a result, all our diplomatic missions will suffer a penalty. We should cancel a few missions so that there is no shortage.",
	support: "Gather Support",
	supportD: "Gathers support in a region, so that it will be more inclined to be ruled by you in the future.",
	assasinate: "Assassinate",
	assasinateD: "Assassinate a royalty. Has a small chance of succeeding and failed attempts will decrease the royalty's opinion of you severely.",
	flatter: "Flatter",
	flatterD: "Flattering a royalty will increase their opinion of you and your faction.",
	sab: "Sabotage",
	sabD: "Sabotage and insult a royalty to decrease their opinion of you.",
},
game.faction.player.PBonusSetting: {
	name: "Setting",
},
game.faction.player.PLevels: {
	mTitle: "New level unlocked!",
	mMessage: "A new level has been bestowed upon your name!",
	Level: "Level",
	Desc: "As you grow in might and population, titles will be bestowed upon your name. Levels will unlock great advantages to a ruler.",
},
game.faction.player.PTech: {
	name: "Technology",
	allocated: "Allocated",
	frozen: "Frozen",
	available: "Available",
	penalty: "Penalty",
	low: "{0} low",
	lowBody: "There is not enough {0} to maintain our current technologies. As a result, all bonuses from technologies using these points are receiving a penalty, and some unlocked mechanics are now re-locked. Make sure your {1} producing facilities are fully operational, or build more of them.",
},
game.faction.player.PTitles: {
	name: "Titles",
	desc: "Titles are unlocked by various achievements. At the start of each game, you may choose 5 of these unlocked titles to be associated with your name and boost your kingdom in various ways.",
},
game.faction.player.PTrade: {
	InExported: "Exported",
	InExportedD: "Moneys earned from exports.",
	OutImported: "Imported",
	OutImportedD: "Moneys spent on imports.",
	units: "units",
	unitsD: "The amount of units traded.",
	price: "Price",
	priceD: "Price per unit.",
},
game.faction.royalty.NPCCourt: {
	sucession: "{0} ascends the throne of {1}, succeeding the old leader, {2}.",
},
game.faction.royalty.opinion.OpsEmi: {
	name: "Emissaries",
	descD: "Based on the actions of your emissaries.",
	assasinated: "Assassinated!",
	assasinatedSucc: "Our emissaries report, their mission is done. The great lord of {FACTION} slipped last night on their nightdress, leading to a fall down the stone stairs of his bed chamber. Once down, a chandelier happened to fall on top of {NAME}'s head, crushing the skull completely. What a tragedy!",
	assasinatedFail: "Busted!",
	assasinatedFailD: "One of our emissaries serving in the court of {FACTION} was arrested and tortured. Unfortunately, our plans have been compromised. {NAME} knows this, and is not too happy about it. Our 'attempts' will continue, but it will be harder now.",
},
game.faction.royalty.opinion.OpsGifts: {
	name: "Generosity",
	nameE: "Extortion",
	nameD: "Based on your previous dealings and gifts.",
},
game.faction.royalty.opinion.OpsOther: {
	liberation: "Liberation",
	liberationD: "Affection from previous liberation of this faction.",
	vassal: "Vassalage",
	vassalD: "Time spent as a vassal to our realm.",
	vassalT: "Vassal Tribute",
	vassalTD: "Based on the number of gifts that have been declined.",
	proximity: "Nearness",
	proximityD: "Based on the distance to this faction, capitol to capitol.",
	kinship: "Kinship",
	kinshipD: "Based on your race and this royalties race.",
	kinshipT: "Kin Treatment",
	kinshipTD: "How you are treating this royalty's race and its affiliated races.",
	poison: "Poison",
	PosionD: "Gained from someone spreading fake news about you to this faction. Someone that doesn't like you.",
},
game.faction.royalty.opinion.OpsStance: {
	WarDec: "War Declaration",
	WarDecD: "Wars that have been declared by you against this faction.",
	WarD: "Time spent at war with this faction.",
	agression: "Aggression",
	agressionD: "Aggression you have shown towards other factions by declaring war. The value is negated by the distance from you to the faction at the time of the declaration. Decreases with time.",
	chivalry: "Chivalry",
	chivalryD: "Based on your chivalrous actions after a successful battle.",
	cruelty: "Cruelty",
	crueltyD: "Based on your cruel actions after a successful battle.",
	joinW: "Joint Wars",
	joinWD: "Joint wars against a common enemy.",
	betrayal: "Betrayal",
	betrayalD: "Oaths, such as pacts or alliances that have been broken.",
	betrayalH: "When setting a new stance, the faction might feel betrayed. This happens when decreasing your current stance, especially if said stance is new. Declaring war on a faction you have a stance with is also frowned upon. You should break all agreements first. You could also sabotage their opinion of you, and have them break off the treaties for no penalty at all.",
	betrayalTime: "Current treaty freshness.",
	betrayalBase: "Base betrayal inflicted.",
	betrayalThis: "Betrayal inflicted on this faction.",
	betrayalOthers: "Betrayal inflicted on surrounding factions.",
	raidingD: "Raids, done by you on this faction's land.",
	peaceD: "From signing a reasonable peace agreement.",
	vassalP: "Failed Protection",
	vassalD: "Vassals you have failed to protect.",
	trespassing: "Trespassing",
	trespassingD: "By having your armies march in this faction's territory, unless you're allies.",
	fatique: "War Fatigue",
	fatiqueD: "Joint was with your allies. No one wants war forever. Aggressive rulers might be more forgiven for drawn-out wars.",
},
game.faction.royalty.opinion.OpsTrade: {
	trade: "Trade Partner",
	tradeD: "How long you have been trade partners.",
},
game.faction.royalty.opinion.ROPINIONS: {
	name: "Opinion",
	desc: "The opinion of a royalty regarding you. High opinion help diplomacy and decreases allows for higher stances. It also prevents war.",
	rName: "Rivalry",
	rDesc: "Rivalry is based on your wealth against any factions wealth. High rivalry might cause the faction to attack you.",
	wname: "Attack Chance",
	wdesc: "As you grow, so will the rivalry increase between you and other factions. IF rivalry outweighs a faction's opinion of you, you are at the risk of being attacked.",
},
game.faction.royalty.Royalty: {
	Ruler: "Ruler of {0}",
	Heir: "First Heir of {0}",
	Heir2: "Second Heir of {0}",
	Heir3: "Third Heir of {0}",
},
game.GameSpec: {
	version: "Version mismatch! Save is made with major game version: {0}. Try downgrading the game to this version. The current game version is: ",
	race: "The amount of races does not match the current configuration.",
	room: "The amount of rooms does not match the current configuration.",
	industries: "The amount of industries does not match the current configuration.",
	resources: "The amount of resources does not match the current configuration.",
	modOther: "The save can not be loaded as it was made with another mod configuration:",
	modNone: "The save can not be loaded as it was made with an un-modified game. Disable all mods in the launcher to load the game.",
	script: "The script: {0} that the game was saved with can not be found.",
	fubar: "The save-file is corrupt.",
	mod2: "Try to enable the same mods, in the same order, in the launcher and reload the save.",
	underlaying: "UnderLaying problem:",
	mods: "Game was saved with other mods than those currently enabled.",
},
game.nobility.Noble: {
	no: "Nobility",
},
game.nobility.NobleOfficeUtil: {
	Governing: "Governor",
	GoverningD: "Gives you {0} gov points to use to develop regions with. Each additional rank yields {1} more points.",
	rBoost: "Boosts {0} workers in your {1} with +1. Each additional rank boosts {2} more workers.",
	name: "Master of {0}",
},
game.nobility.NOBLES: {
	desc: "The amount of nobles you may appoint.",
	rname: "Noble Promotions",
	rdesc: "The amount of promotions you can offer your nobles.",
	title: "Nobility passed!",
	mess: "It is a sad day. Our noble {0} passed today. We can now assign a new nobleman to this cause.",
},
game.raiding.MessAlly: {
	title: "Help!",
	desc: "If we don't pay this ransom, chances are neighbour allows for free passage though their lands, or gets attacked themselves.",
	destroy: "Raider destroys!",
	ftitle: "Raider Chased off",
	fdesc: "Due to your failure to pay off the raider, this faction is upset with you.",
	fwtitle: "Raider On their way",
	fwdesc: "Since we didn't pay our neighbour, they have now allowed for free passage for {0} into our lands. Muster the men!",
	requestHelp: "Request Assistance",
	requestHelpD: "Request that the faction attack this bandit. The consequences of this might are hard to foresee.",
},
game.raiding.MessArmyAppear: {
	title: "Raiders Arrived",
	desc: "{0} has been spotted at our borders Milord. Death and destruction will follow in {1} path to our capital. We must put a stop to this now.",
},
game.raiding.MessArmySpotted: {
	title: "Raiders Approaching",
	desc: "{0} and {1} band of raiders are approaching our borders Milord. We should prepare for {2} arrival.",
},
game.raiding.MessCustom: {
	title: "Raider",
},
game.raiding.MessDefeated: {
	title: "Raider Defeated",
	desc: "The once mighty {0} lies dead at your feet, oh mighty one. This will surely send a powerful message throughout all of Syx.",
	loot: "In addition, {HIS} personal treasury has been found and looted by our men. A total of {0} denari was found and has been transported to our treasury.",
},
game.raiding.MessDemand: {
	title: "Protection?",
	title2: "Raider Returns",
	pay: "Pay Up",
	decline: "Decline Offer",
	proInfo: "Our scouts report these people have about {0} soldiers. Paying the sum is a safe bet. Declining might lead to trouble. We have 1 day to decide.",
	nolonger: "You do not have enough resources to meet their demands. ({0})",
	nocreds: "You do not have enough denari to meet their demands.",
	noslaves: "You do not have enough slaves to meet their demands. ({0})",
},
game.raiding.MessDemandRejected: {
	title: "Raider Rejected",
	body: "This is ill news for us indeed. Perhaps we should have paid the ransom. Now we must prepare for an attack.",
},
game.raiding.MessDemandTY: {
	title: "Raider Satisfied",
	body: "Since we paid the ransom, this raider will leave us alone. For now...",
},
game.raiding.MessGoingAway: {
	title: "Raider Retreats",
	desc: "Due to unknown reasons, {0} has turned back {1} army and left our lands. Lets pray {2} never returns.",
},
game.raiding.MessVictory: {
	title: "Raider Raids",
},
game.raiding.RaidingMap: {
	Name: "Raid Chance",
	desc: "Rich border regions without proper garrisons or armies might become subject to raiders sacking them.",
},
game.raiding.UpdaterRegions: {
	nameRace: "{0} Raiders",
	nameRegion: "Raiders of {0}",
	title: "Raiders!",
	desc: "Mi lord, bandits have been spotted raiding our border settlements!",
},
game.save.GameSaver: {
	save: "Saving",
	savingDisk: "Saving to disk, please wait.",
},
game.save.SaveFile: {
	Version: "This save is from a previous version and will probably not load!",
	Mod: "This save is made with a different mod configuration and will probably not load!",
},
game.tourism.Updater: {
	MessageFirst: "Our city is now impressive enough to attract our first tourist. A {RACE} pilgrim by the name of {NAME} has arrived. This particular tourist is looking for inn to stay, and wants to visit: {ATTRACTION} and {SERVICE}.",
},
game.values.GCOUNTS: {
	ENSLAVED: "Enslaved Population",
	FREED_SLAVES: "Slaves Freed",
	TIME_PLAYED: "Time Played",
	TRADE_SALES: "Denari from sales",
	TRADE_PURCHASES: "Denari from purchases",
	RIOTS: "Riots",
	CRAFTED: "Goods Crafted",
	INVASIONS: "Invasions",
	EXECUTIONS: "Executions",
	TUNNELS: "Tunnels dug",
	SUBJECTS: "Population",
	ENEMIES_KILLED: "Enemies killed",
	BATTLES_WON: "Battles Won",
	BATTLES_LOST: "Battles Lost",
	INVASIONS_WON: "Invasions Won",
	INVASIONS_LOST: "Invasions Lost",
	ROYALTIES_KILLED: "Royalties assassinated",
	HOSPITAL_CURED: "Cured",
	ACCIDENTS: "Accidents",
	UNITES: "Kingdoms united",
	allTime: "all time",
},
game.values.Lockable: {
	requires: "Requires",
},
game.values.Lockers: {
	uworld: "Unlocks (World)",
	uIndu: "Unlocks (Subject)",
	uFaction: "Unlocks (Faction)",
},
init.race.RacePreferrence: {
	preference: "preference",
},
init.race.RACES: {
	name: "Species",
},
init.resources.Minable: {
	minable: "{0} Deposits",
},
init.resources.RESOURCE: {
	Exists: "Resources exist scattered on the map that are not yet stored and counted: ",
	Production: "Produced per day (estimation):",
},
init.resources.RESOURCES: {
	helpStone: "Stone can be obtained by manually clearing rocks on the ground.",
	helpWood: "Wood can be obtained by manually clearing trees.",
	helpGrow: "This crop might be growing in the wild. Have a look, maybe you can harvest some manually.",
},
init.settings.S: {
	some: "some",
	lots: "lots",
	Shadow: "Shadow",
	ShadowD: "The amount of shadows in-game. Can decrease performance.",
	Particles: "Particles",
	ParticlesD: "The amount of particles in-game. Can decrease performance.",
	Gore: "Gore",
	GoreD: "The amount of gore in-game. Can decrease performance.",
	Volume-Master: "Volume-Master",
	SoundD: "The master sound volume",
	Volume-Effects: "Volume-Effects",
	EffectD: "The sound effects volume",
	Volume-Ambience: "Volume-Ambience",
	AmbienceD: "The ambience volume",
	Volume-Music: "Volume-Music",
	MusicD: "The music volume",
	Graphics: "Graphics",
	GraphicsD: "The amount of detail when rendering the map.",
	Mute-Un-focused: "Mute-Un-focused",
	Mute-UnfocusedD: "Will mute the game when game is un-focused",
	Brightness: "Brightness",
	BrightnessD: "The brightness of the game.",
	Day-cycle: "Day-cycle",
	Day-cycleD: "Simulates the day and night cycle visually.",
	UI-Day-cycle: "UI-Day-cycle",
	UI-Day-cycleD: "Simulates the day and night cycle visually for the UI.",
	Weather: "Weather",
	WeatherD: "Adds visual weather, such as rain and snow to the game.",
	{0} min: "{0} min",
	Auto-Saving: "Auto-Saving",
	Auto-SavingD: "How often the game will auto-save.",
	Auto-Save-Files: "Auto-Save-Files",
	Auto-Save-FilesD: "How many auto save files that will be kept.",
	Edge-Scrolling: "Edge-Scrolling",
	Edge-ScrollingD: "Scroll maps by touching the edges.",
},
init.tech.TECHS: {
	name: "Technology",
	desc: "Technologies unlocks various boosts and rooms.",
},
init.text.InsertIndu: {
	poor: "poor",
	good: "good",
	excellent: "excellent",
	amongOthers: "among others.",
},
init.type.CAUSE_ARRIVES: {
	Born: "Born",
	BornD: "Subjects that have been born in your city.",
	Immigrated: "Immigrated",
	ImmigratedD: "Subjects that have immigrated to your city.",
	Emancipated: "Emancipated",
	EmancipatedD: "Subjects that are freed slaves.",
	Parole: "Parole",
	ParoleD: "Subjects that have been prisoners and are now pardoned and free citizens.",
	Soldiers: "Soldiers",
	SoldiersD: "Soldiers that have returned from campaigning.",
	Readjusted: "Readjusted",
	ReadjustedD: "Subjects that have been readjusted in the asylum and cured of insanity.",
},
init.type.CAUSE_LEAVES: {
	Army-Duty: "Army-Duty",
	Army-Duties: "Army-Duties",
	ArmyDutyD: "Subjects that have left your city to join distant armies.",
	Emigrated: "Emigrated",
	Emigration: "Emigration",
	EmmigratedD: "Subjects that have left your city.",
	Starved: "Starved",
	Starvation: "Starvation",
	StarvedD: "Subjects that have starved to death from lack of food.",
	Sacrificed: "Sacrificed",
	Sacrifices: "Sacrifices",
	SacrificedD: "Subjects that have been sacrificed to the gods.",
	Slain: "Slain",
	Slaying: "Slaying",
	SlainD: "Subjects that have fallen in battle.",
	Mauled: "Mauled",
	Mauling: "Mauling",
	AnimalsD: "Subjects that have been slain by wild beasts.",
	Aging: "Aging",
	Age: "Age",
	AgeD: "Subjects that have died naturally from old age.",
	Accident: "Accident",
	Accidents: "Accidents",
	AccidentD: "Subjects that have died from accidents.",
	Heat: "Heat",
	Heat Exposure: "Heat Exposure",
	HeatD: "Subjects that have died from heat exposure. Build bodies of water or wells to prevent this.",
	Cold: "Cold",
	Cold Exposure: "Cold Exposure",
	ColdD: "Subjects that have frozen to death. Build hearths to avoid.",
	Murdered: "Murdered",
	Murders: "Murders",
	MurderD: "Subjects that have been murdered.",
	Disease: "Disease",
	Diseases: "Diseases",
	DiseaseD: "Subjects that have died from diseases.",
	Executed: "Executed",
	Executions: "Executions",
	ExecutedD: "Subjects that have been executed.",
	Punished: "Punished",
	Punishment: "Punishment",
	PunishmentD: "Subjects that have been turned into prisoners.",
	Drowned: "Drowned",
	Drownings: "Drownings",
	DrownedD: "Subjects that have drowned.",
	Deserted: "Deserted",
	Desertion: "Desertion",
	DesertedD: "Soldiers that have deserted.",
	Exiled: "Exiled",
	Exile: "Exile",
	ExileD: "People condemned to exile.",
	Brawl: "Brawl",
	Brawls: "Brawls",
	BrawlD: "Subjects that have died from a brawl that has gone too far. Try separating the homes of species that hate each other.",
	Other: "Other",
	Others: "Others",
	OtherD: "Other causes.",
	Insane: "Insane",
	Insanity: "Insanity",
	InsanityD: "Subjects that have become insane.",
	Sold: "Sold",
	SoldD: "Subjects that have been sold.",
},
init.type.CLIMATES: {
	Climate: "Climate",
	desc: "Climate zones have a range of bonuses and drawbacks. They also have different base temperatures, which can lead to exposure and death for your subjects depending on their natural resilience to hot and cold.",
	Cold: "Cold",
	cold_desc: "Very cold winters. Unique crops. Low disease rates.",
	Temperate: "Temperate",
	temp_desc: "Varying temperature.",
	Warm: "Warm",
	warm_desc: "Hot summers.",
},
init.type.DISEASE: {
	Spread: "Spread",
	Occurrence: "Occurrence",
	Incubation: "Incubation Days",
	Length: "Infection Days",
	Lethality: "lethality",
},
init.type.HCLASSES: {
	Noble: "Noble",
	Nobilities: "Nobilities",
	NobilityD: "The Nobility are the top social layer of your kingdom. They do not work traditionally and demand a salary amongst high tier services. The rewards for having nobles around can be great however.",
	Plebeian: "Plebeian",
	Plebeians: "Plebeians",
	PlebeianD: "Plebeians are the bulk of your population and will carry out your wishes.",
	Slave: "Slave",
	Slaves: "Slaves",
	SlaveD: "Slaves do mundane and hard work, but need little in return. They can not be trained into soldiers, or be educated, or replicated, but are gained through processing your captives. If you mistreat slaves they may revolt.",
	Child: "Child",
	Children: "Children",
	ChildD: "Children are to-be citizens. They require food and protection from a manned nursery and can be educated in a school. They will sometimes run around causing mischief.",
},
init.type.HTYPES: {
	Citizen: "Citizen",
	Citizens: "Citizens",
	CitizenD: "Citizens are the bulk of your population and will carry out your wishes.",
	Retiree: "Retiree",
	Retirees: "Retirees",
	RetireeD: "Retired people are citizens that have served you for many years and are now entitled to some relaxation their final years. They do not work.",
	Recruit: "Recruit",
	Recruits: "Recruits",
	RecruitD: "Recruits are citizens either training their combat skills for a place in a division, or honing these skills towards the limit you've set for said division.",
	Student: "Student",
	Students: "Students",
	StudentD: "Students are citizens currently attending university. They do not count towards your workforce.",
	Prisoner: "Prisoner",
	Prisoners: "Prisoners",
	PrisonerD: "Prisoners are caught criminals, or POWs. Prisoners will spend their time in your dungeons. They can be used as sacrifices in temples, or gladiators. They can also be enslaved, or executed.",
	TouristD: "Tourists are foreigners visiting your city in search of a spectacle. Treat them well, and they will show their appreciation by tossing you some coins.",
	Soldier: "Soldier",
	Soldiers: "Soldiers",
	SoldierD: "Soldiers are men on the battlefield.",
	Enemy: "Enemy",
	Enemies: "Enemies",
	EnemyD: "Enemies are hostile peoples, bent on destroying your rule",
	Rioter: "Rioter",
	Rioters: "Rioters",
	RioterD: "Rioters are former citizens, who have had enough of your rule and express their disappointment by burning your city to ashes.",
	Deranged: "Deranged",
	Derangeds: "Deranged",
	DerangedD: "Deranged are people who have gone insane. They will do no work, and wander around your city doing erratic things. Can be cured in an asylum.",
	Nobility: "Nobility",
	Nobles: "Nobles",
	NobilityD: "The nobility are above the common plebs. Do not work in a traditional sense and require the best of services.",
	Slave: "Slave",
	Slaves: "Slaves",
	SlaveD: "Slaves do mundane and hard work, but need little in return. They can not be trained into soldiers, or be educated, or replicated, but are gained through processing your captives. If you mistreat slaves they may revolt.",
	Child: "Child",
	Children: "Children",
	ChildD: "Children require staffed nurseries to grow up to become subjects. Children can be educated by schools.",
},
init.type.NEED: {
	rateD: "The rate at which the need of {0} increases daily.",
},
init.type.NEEDS: {
	Service: "Service Needs",
	Basic Needs: "Basic Needs",
	event: "Small Event",
},
init.type.TERRAINS: {
	Terrain: "Terrain",
	Ocean: "Ocean",
	OceanD: "Salt water such as oceans. Good for trade.",
	Sweet: "Fresh water",
	SweetD: "Fresh water such as river beds or lakes. Often high fertility ground.",
	Mountain: "Mountain",
	MountainD: "Barren, but rich in mineral deposits.",
	Forest: "Forest",
	ForestD: "Forested areas. Good for lumber.",
	OpenLand: "Open Land",
	Open Land: "",
},
init.type.TRAIT: {
	name: "Trait",
},
settlement.army.invasion.Attack: {
	vTitle: "Victory",
	vBody: "The enemy is beaten. Rejoice! Spoils from the battlefield will soon arrive. Do you wish to accept the captives, or should we 'release' them my lord?.",
	dTitle: "Defeat",
	dBody: "You have lost! Our men have thrown away their lives in vain. The enemy will be be at our gates at any moment! We must pray for mercy.",
},
settlement.army.invasion.Invador: {
	inv: "Pending Invasion",
},
settlement.army.invasion.Invasion: {
	Bombardment: "Bombardment",
	BombardmentD: "The enemy has started bombarding us to clear a path. There is nothing we can do but take cover until they are done.",
	Deployment: "Deployment",
	DeploymentD: "The enemy are deploying their troops. May the gods help us!",
	Retreat: "Retreat!",
	RetreatD: "Enemy forces are weary of fighting and have retreated!",
	LooseD: "It's over! The enemy forces have reached the throne, and have taken control of the city. They have sacked your treasury for {0} {1}, and collected {2}% of your warehouse stock.",
	LooseDFaction: "The faction of {0} sends its regards. Now that you've bent the knee, they hope you've learned your lesson, and you are now at peace.",
	Victory: "Our men have prevailed and our foe is beaten. Rejoice! The {0} survivors can be turned into prisoners, and need a stockade to stay in. Do you accept them? Declining will have the remaining enemies chased down and killed.",
},
settlement.army.invasion.Prompt: {
	invasion: "Invasion!",
	invasionD: "An enemy host stands gathered {0} of the city, preparing for an assault. They will attack at any moment. If they reach the throne, it is all over.",
	count: "Our scouts report {0} soldiers.",
	attack: "There is still a window of opportunity to attack them before they begin their assault. If we don't, we'll fight in the city.",
},
settlement.army.morale.MoraleArmy: {
	numbers: "Numbers",
	numbersD: "The size of your army compared to the size of the enemy.",
},
settlement.army.morale.MoraleDiv: {
	ArmyD: "Base Morale of your army. Affected by being outnumbered, and by being ill supplied.",
	CasultiesD: "The amount of soldiers that have been killed recently. Will go down slowly with time after a battle.",
	Routing: "Routing",
	RoutingD: "Once soldiers begin to desert in a division, others will as well.",
	FormationD: "The integrity of the formation the division is currently in.",
	ProjectilesD: "The amount of fire sustained recently.",
	Flanks: "Flanks",
	FlanksD: "Attacks made on the flanks of a division can decrease morale.",
	Situation: "Situation",
	The proximity, and amount of enemy troops and their quality.: "The proximity, and amount of enemy troops and their quality.",
},
settlement.entity.animal.Animal: {
	Cub: "Cub",
	domestcated: "(Domesticated)",
},
settlement.entity.humanoid.ai.battle.AIModule_Battle: {
	name: "Battle",
	desc: "Joining of mustered divisions and fighting.",
},
settlement.entity.humanoid.ai.battle.ManPlan: {
	Name: "Manning defenses",
},
settlement.entity.humanoid.ai.battle.MarchPlan: {
	Reforming: "Reforming",
	Waiting: "Waiting for orders",
	Breaking: "Breaking Formation",
	Firing: "Firing",
},
settlement.entity.humanoid.ai.battle.PlanAttackTile: {
	name: "attacking terrain",
},
settlement.entity.humanoid.ai.consume.AIModule_Drink: {
	name: "drink",
	desc: "Consume drink off the ground or in a tavern.",
},
settlement.entity.humanoid.ai.consume.AIModule_Food: {
	name: "eat",
	desc: "Find food",
},
settlement.entity.humanoid.ai.consume.AIModule_Shop: {
	name: "Shopping",
	desc: "Browse the local markets or warehouses for equipment and Furniture.",
},
settlement.entity.humanoid.ai.consume.D_PlanDrinkGround: {
	sDrink: "Having a drink",
},
settlement.entity.humanoid.ai.consume.D_PlanDrunk: {
	drunk: "Intoxicated",
	sobering: "Sobering Up",
},
settlement.entity.humanoid.ai.consume.F_PlanEat: {
	name: "Finding food",
},
settlement.entity.humanoid.ai.consume.F_PlanStarve: {
	cannibal: "Eating a corpse",
	starving: "Starving",
	eating: "Eating Dirt",
},
settlement.entity.humanoid.ai.consume.M_PlanEquip: {
	name: "Getting equipment",
},
settlement.entity.humanoid.ai.consume.M_PlanReturn: {
	sName: "Returning equipment",
},
settlement.entity.humanoid.ai.crime.AIModule_Crime: {
	name: "Mischief",
	desc: "Commit crimes",
},
settlement.entity.humanoid.ai.crime.Disrespect: {
	verb: "Disrespecting the ruler!",
},
settlement.entity.humanoid.ai.crime.Flasher: {
	verb: "Streaking",
},
settlement.entity.humanoid.ai.crime.Murder: {
	verb: "Murdering",
},
settlement.entity.humanoid.ai.crime.SerialKiller: {
	verb: "Walking around",
},
settlement.entity.humanoid.ai.crime.Theft: {
	verb: "Stealing!",
},
settlement.entity.humanoid.ai.crime.Vandalism: {
	verb: "Vandalizing",
},
settlement.entity.humanoid.ai.danger.AIModule_Exposure: {
	name: "Find Shelter",
	desc: "Find Shelter or services to alleviate heat or cold.",
	freezing: "Freezing!",
	cover: "Cooling down",
	nearDeath: "(Near Death!)",
},
settlement.entity.humanoid.ai.danger.AIModule_Health: {
	name: "Recover",
	desc: "Recover from injuries or illness, either at home or at a hospital.",
},
settlement.entity.humanoid.ai.danger.PlanInjured: {
	name: "Bleeding out",
},
settlement.entity.humanoid.ai.danger.PlanSick: {
	name: "Being sick",
},
settlement.entity.humanoid.ai.home.AIModule_Home: {
	name: "relaxing",
	name2: "Go Home",
	desc: "Spend some time off the bustling street and have a nap. Preferably in a home.",
	curfew: "Staying off the streets",
	ground: "Going to sleep",
	groundS: "Sleeping",
},
settlement.entity.humanoid.ai.home.PlanReturn: {
	sName: "Returning Furniture",
},
settlement.entity.humanoid.ai.idle.AIModule_Idle: {
	name: "Biding Time",
	name2: "Bide Time",
},
settlement.entity.humanoid.ai.idle.Inter: {
	MoveAway: "making way",
},
settlement.entity.humanoid.ai.idle.PlanInterract: {
	name: "Hanging out with {0}",
	nameMeet: "Meeting up with {0}",
	fighting: "Fighting {0}",
	knockedOut: "Knocked out",
},
settlement.entity.humanoid.ai.main.AIEventListeners: {
	Fighting: "Fighting",
	Catching-Criminal: "Catching Criminal",
	Fleeing: "Fleeing",
	Stopping: "Stopping",
	Confused: "Confused",
	Out-of-breath: "Out-of-breath",
	criminal: "Handling Criminal",
	tackled: "tackled",
},
settlement.entity.humanoid.ai.main.AIPlans: {
	swimming: "Swimming",
	trapped: "Cut off from the throne",
	WalkingToCentre: "Walking to the center of the city",
	Fleeing: "Fleeing",
},
settlement.entity.humanoid.ai.service.AIModule_Service: {
	name: "Service",
	desc: "Do an activity that is on offer in your city.",
},
settlement.entity.humanoid.ai.service.PlanMourn: {
	verb: "Mourning old friend",
},
settlement.entity.humanoid.ai.service.PlanSkinny: {
	verb: "Skinny dipping",
},
settlement.entity.humanoid.ai.service.PlanStocks: {
	verb: "Watching a prisoner",
},
settlement.entity.humanoid.ai.subject.AIModule_Subject: {
	swearing: "Swearing fealty",
	name: "Misc.",
},
settlement.entity.humanoid.ai.subject.PlanEmmigrate: {
	name: "Fed up with this dump and your failing rule.",
},
settlement.entity.humanoid.ai.subject.PlanJoinArmy: {
	Leaving: "Leaving for the Army",
},
settlement.entity.humanoid.ai.types.child.AIModule_Child: {
	play: "Playing",
	sleep: "Sleeping",
	Homeless: "Homeless",
	Studying: "Studying",
	WarmingUp: "Staying indoors",
},
settlement.entity.humanoid.ai.types.insane.AIModule_Insane: {
	treatment: "In Treatment",
	insane: "Being Insane",
	name: "Be Insane",
},
settlement.entity.humanoid.ai.types.noble.AIModule_Noble: {
	name: "Be Noble",
	verb: "Inspecting",
},
settlement.entity.humanoid.ai.types.prisoner.AIModule_Prisoner: {
	name: "Atonement",
},
settlement.entity.humanoid.ai.types.prisoner.Arena: {
	name: "Fighting to death in the arena.",
},
settlement.entity.humanoid.ai.types.prisoner.Jail: {
	name: "In Stockade",
},
settlement.entity.humanoid.ai.types.prisoner.Temple: {
	name: "Being Sacrificed",
},
settlement.entity.humanoid.ai.types.recruit.AIModule_Recruit: {
	name: "Training",
	desc: "Spend time in a training facility to hone skills",
},
settlement.entity.humanoid.ai.types.retired.AIModule_Retired: {
	name: "Retire",
	desc: "Spend time at a retirement facility.",
},
settlement.entity.humanoid.ai.types.rioter.AIModule_Rioter: {
	verb: "Rioting",
	name: "Riot",
},
settlement.entity.humanoid.ai.types.slave.AIModule_Slave: {
	leave: "Leaving city for another master.",
	name: "rise up",
},
settlement.entity.humanoid.ai.types.slave.PlanUprise: {
	verb: "Minding own business!",
},
settlement.entity.humanoid.ai.types.student.AIModule_Student: {
	name: "Study",
	desc: "Gain some education or indoctrination in a learning facility",
},
settlement.entity.humanoid.ai.types.student.Plan: {
	study: "studying",
},
settlement.entity.humanoid.ai.types.tourist.AIModule_Tourist: {
	name: "Sight Seeing",
	checkin: "checking in",
	checkout: "checking out",
	sight: "sightseeing",
	leaving: "leaving",
},
settlement.entity.humanoid.ai.util.AIPlanGladiator: {
	name: "Fighting",
},
settlement.entity.humanoid.ai.util.AIPlanResourceMany: {
	fetch: "Fetching Resources",
},
settlement.entity.humanoid.ai.work.AIModule_Work: {
	name: "Work",
	desc: "Spend time working",
},
settlement.entity.humanoid.ai.work.PlanFetchEquip: {
	fetch: "Fetching Work Equipment",
},
settlement.entity.humanoid.ai.work.PlanHangArround: {
	wait: "Waiting for work",
},
settlement.entity.humanoid.ai.work.PlanOddHunt: {
	verb: "Hunting",
},
settlement.entity.humanoid.ai.work.WorkAbs: {
	walk: "walking to job",
	storing: "storing resource",
},
settlement.entity.humanoid.ai.work.WorkDeliveryman: {
	storing: "Storing Goods",
	waiting: "Waiting for orders",
},
settlement.entity.humanoid.ai.work.WorkHooker: {
	waiting: "Waiting for business",
},
settlement.entry.Immigration: {
	immigrants: "Immigrants",
	camp: "Havens Max",
	immigrantD: "Immigrants are subjects from either your regional population, or camps that have joined your cause. These subjects will be attracted by your current happiness. Happiness above 80% will attract immigrants at an increasing rate.",
	admitted: "Admitted",
},
settlement.entry.Updater: {
	open: "Capital Open!",
	openD: "Your capital is now open for immigrants and trade.",
	closed: "Capital Closed!",
	closedD: "Your capital is unreachable. There is no clear path from any entry point to your Throne. As a consequence, no immigration or trade can happen. Clear a path to an edge of the map as soon as possible.",
	mTitle: "City Isolated!",
	mDesc: "One or several of our city's entry points have been blocked off, and as a result, outsiders will have a problem reaching us. This will have many negative consequences and should be fixed as quickly as possible.",
},
settlement.environment.SettEnvShape: {
	name: "Shape",
	desc: "The shape of your buildings, such as walls and fences. Can be either round, or square.",
	square: "Squareness",
	round: "Roundness",
},
settlement.job.Job: {
	claimed: "Is Claimed",
	claimedNot: "Is Unclaimed",
	resources: "This job needs {0} to complete, which is unobtainable in your city.",
	dormant: "Job is inactive and needs to be manually activated before it will be performed.",
	blocked: "An adjacent job is blocking this job and must be performed prior to this.",
	unreachable: "Job is unreachable from the throne and will not be performed.",
},
settlement.job.JobBuildFence: {
	desc: "Stops subjects and animals from wandering where you don't desire them.",
},
settlement.job.JobBuildFillCave: {
	name: "Refill Mountain Cave",
	desc: "Refills dug tunnels or natural mountain caves",
},
settlement.job.JobBuildFort: {
	dStairs: "Stairs are used for getting access to the top of fortifications. Should be placed adjacent to one.",
},
settlement.job.JobBuildRoad: {
	Convert: "Convert",
	ConvertD: "Convert existing roads into this type.",
	durability: "Durability",
},
settlement.job.JobBuildStructure: {
	WallD: "Walls can be used to fence off areas.",
	CeilingD: "Ceilings can house rooms inside them and protects subjects from the elements.",
	Structure: "{0} Room.",
	StructureD: "A combination tool that makes ceilings surrounded by walls of a chosen material.",
	Convert: "Convert",
	ConvertD: "Convert existing structures into this type.",
	SameProblem: "Must be placed on a structure of a different type.",
	Blocked: "Area is blocked and can't be worked.",
	Rooms: "The ceiling of rooms must be changed by refurnishing the room.",
	constructions: "Construction Seconds",
},
settlement.job.JobClears: {
	harvestDesc: "This job is dormant since there currently isn't enough growth to harvest anything. The job will become active once growth occurs.",
	hunt: "Hunt",
	huntD: "Manually hunt the wild animals on the map for resources. Note that hunting can be dangerous. A hunter might get mauled from time to time.",
	huntCancel: "Cancel Hunt",
	Stone: "Clear Rock",
	StoneD: "Removes rocks on the map. Yields the resource stone.",
	StoneV: "Clearing rocks",
	Tree: "Fell Tree",
	TreeD: "Removes trees and yields wood. Trees will slowly grow back in time.",
	TreeV: "Chopping lumber",
	Food: "Forage",
	FoodD: "Forage Wild Growing crops. These re-grow with each year.",
	FoodV: "Gathering",
	Water: "Remove Water",
	WaterD: "Removes natural occurring water. Deep water can not be removed completely, but a passage-way can be created.",
	WaterV: "Removing water",
	Canal: "Return water",
	CanalD: "Return water to where there is ground water.",
	Tunnel: "Dig Into Mountain",
	TunnelD: "Digs a tunnel into the mountain.",
	TunnelV: "Tunnels into the mountain",
	Clear: "Clear All",
	ClearD: "Clears stone and wood.",
	Structure: "Dismantle Structure",
	StructureD: "Removes structures (fortifications, walls, roofs and roads.)",
	StructureV: "Demolishing structure",
},
settlement.job.Placer: {
	overwrite: "Overwrite",
	overdesc: "Overwrites other jobs or structures when placed.",
},
settlement.job.PlacerActivate: {
	name: "Activate Job",
	desc: "Activates suspended jobs.",
},
settlement.job.PlacerDelete: {
	name: "Cancel Jobs",
	desc: "Cancels all jobs and room plans.",
},
settlement.job.PlacerDormant: {
	name: "Suspend Jobs",
	desc: "Suspended jobs will not be performed. Useful for planning out your city and controlling which areas will be worked first.",
},
settlement.job.PlacerRemoveAll: {
	remove: "Dismantle",
	desc: "Dismantles structures and rooms.",
},
settlement.job.PlacerRemoveSmart: {
	remove: "Smart Remove",
	desc: "Removes jobs if any selected, else removes structures and rooms.",
},
settlement.job.PlacerRepair: {
	name: "Repair",
	desc: "Repair damaged structures and rooms.",
},
settlement.main.SETT: {
	Saving City Resource: "Saving City Resource",
	Loading City Resource: "Loading City Resource",
	Clearing: "Clearing",
	Generating: "Generating",
	Initializing: "Initializing",
},
settlement.maintenance.PlacerDormant: {
	name: "Enable maintenance",
	nameAnti: "Disable maintenance",
	desc: "Enables maintenance performed by janitors in on area.",
	descAnti: "Disables maintenance performed by janitors on an area.",
},
settlement.overlay.OverlayMaintenance: {
	desc: "Highlights which tiles need maintenance.",
},
settlement.overlay.RoomProblem: {
	desc: "Show problems that exists with your rooms.",
},
settlement.overlay.SettOverlay: {
	Resources: "Resources",
	ResourcesD: "Highlights deposits and wild growth.",
	Deposits: "Deposits",
	DepositsD: "Highlights deposits that can be mined.",
	GroundW: "Ground Water",
	GroundWD: "Ground water of either sweet (blue) or salt (yellow). Natural water can be added or removed here.",
	Harvestable: "Harvestable",
	HarverstableD: "Highlights wild growing things that can be harvested.",
	Fertility: "Fertility",
	FertilityD: "Highlights fertility, including that which is gained by fresh water.",
	Fertility-base: "Fertility-base",
	FertilityBaseD: "Highlights base ground fertility.",
	Fish: "Fish",
	FishD: "Found along the shorelines. Building fisheries on these spot allows for sending out boats, and allows for many more fishermen.",
	Mountain: "Mountain",
	MountainD: "Shows the strength of mountains.",
	Path-Usage: "Path-Usage",
	Path-UsageD: "Highlights the tiles your subjects use when moving.",
	Paint-Tool: "Paint-Tool",
	Paint-ToolD: "shows your manual paintings on the map.",
	Homeless: "Homeless",
	HomelessD: "Highlights homeless workplaces and homeless oddjobbers.",
},
settlement.room.food.farm.Constructor: {
	warning: "Fertility for this farm is very low, which will result in low yields. It can be improved by digging water around the farm. Proceed anyway?",
},
settlement.room.food.farm.Gui: {
	estimated: "Estimated Harvest (year)",
	daysToHarvest: "Days until harvest",
	baseValue: "Base Value",
	workValue: "Work Value",
	workValueD: "Each day of the year a farm needs tending to. Workers failing to tend to all the tiles will lead to low yields.",
	HarvestYear: "This Year",
	HarvestPrev: "Last Year",
	skill: "Bonus",
	skillD: "The average bonus accumulated during the year. This determines the output of the harvest.",
	skillCurrent: "Bonus (current)",
	skillCurrentD: "The bonus that is currently being added to the Farm.",
	cycle: "Cycle",
	reseed: "reseed",
	reseedD: "Reseed the farm with another crop. New farm must still be constructed.",
},
settlement.room.food.farm.Tile: {
	till: "Tilling",
	tending: "Tending",
	harvesting: "Harvesting",
	clearing: "Clearing",
},
settlement.room.food.fish.Constructor: {
	problem: "Must not be placed on water",
	problem2: "Shape must contain more water tiles in order to function",
	deep: "Deep Sea.",
	deepD: "Deep sea access. Increased worker capacity.",
},
settlement.room.food.hunter.ROOM_HUNTER: {
	emp: "The more employees you have, the less efficient this industry will become. The max amount for this room is {0}. Employees after that point will decrease the output gradually.",
	luck: "Luck",
	luckD: "How lucky your hunters are. Changes annually",
},
settlement.room.food.orchard.Constructor: {
	warning: "Fertility for this orchard is very low, which will result in low yields. This can be improved by irrigation. Proceed anyway?",
},
settlement.room.food.orchard.Gui: {
	Trees: "Trees",
	TreesD: "Amount of fully grown trees. Only when trees are fully grown will they start producing. Neglected trees will die.",
	TreeNext: "Next tree will be grown in:",
	estimated: "Estimated Harvest (year)",
	daysToHarvest: "Days until harvest",
	baseValue: "Base Value",
	HarvestYear: "This Year",
	HarvestPrev: "Last Year",
	skill: "Bonus",
	skillD: "The average bonus accumulated during the year. This determines the output of the harvest and the growth rate of the trees.",
	skillCurrent: "Bonus (current)",
	skillCurrentD: "The bonus that is currently being added to the Orchard.",
	chop: "Chop",
	chopD: "Reset all progress by chopping down the trees and instantly get {0} {1}.",
},
settlement.room.food.pasture.Constructor: {
	Problem: "Must be facing the edge of the room.",
	Problem2: "Must not be placed in a corner.",
	Problem3: "Will be blocked by walls",
	TooThin: "Area is too thin at places. Expand the area to at least 3x3.",
},
settlement.room.food.pasture.Gui: {
	Animals: "Animals",
	Adults: "Adults",
	Tending: "Tending",
	Skill: "Skill",
	SkillD: "Skill that gets put into the tending, multiplying the output.",
	BaseRate: "Base Rate",
	FailedTending: "Failed Tending",
	DailyWork: "Daily Tending",
	DailyWorkD: "Daily Tending is the amount of work needed to keep this pasture functioning. The amount of work needed depends on the amount of animals. If the workers fail to do the tending, animals will start to die. Resets each day.",
	SlaughterAll: "Slaughter all",
	SlaughterAllDesc: "Slaughter all animals and immediately receive some produce?",
	ProdExp: "Production of the current day is based on the work of the previous day. The workers must tend to the animals each day. Failing to tend to the animals for one day will result in lower produce. Failing two days in a row results in livestock dying.",
},
settlement.room.health.asylum.Gui: {
	Treatment: "Treatment",
	TreatmentD: "Treatment factor is determined my the number of employed wards and degrade of the room. Keep rooms fully employed for the best recover rates.",
},
settlement.room.health.hospital.Gui: {
	nn: "Fetch:",
	hov: "Not allowing this resource yields a recovery rate of 20% Allowing your nurses to use this resource increases recovery-rate to 50%",
},
settlement.room.home.house.HomeHoverer: {
	Residents: "{0}  ({1})",
	VacantFor: "Vacant for {0}:",
	Any: "Any species of any class.",
	None: "None",
},
settlement.room.industry.mine.Constructor: {
	problemMore: "This room must be partially placed on {0} in order to function.",
	mustBe: "Must not be placed on {0}",
},
settlement.room.industry.mine.ROOM_MINE: {
	OutputD: "When building the mine, the density of the {0} determines the output. The highest density is applied when you have but 1 worker. This value will move down to the average density the more people you employ in the mine.",
	Output: "Output",
},
settlement.room.industry.module.FlatIndustries: {
	desc: "Decreases the consumption of this resource in industries:",
},
settlement.room.industry.woodcutter.Constructor: {
	problem: "Must not be placed on trees",
	prob: "This room must partially be placed on trees in order to function.",
	probMore: "This room must be placed on more trees in order to function.",
},
settlement.room.infra.admin.AdminData: {
	degradeD: "Degrade per year. Each worker can only produce and maintain so much {0}. Without worker effort, the value will start to degrade with time.",
},
settlement.room.infra.admin.Gui: {
	projection: "Projected Administration from your current workers",
},
settlement.room.infra.embassy.ROOM_EMBASSY: {
	target: "The estimated amount of diplomacy points that will be produced.",
},
settlement.room.infra.export.ExportTally: {
	ExportProblem: "You don't have any export depots set to this resource. No exporting can be done.",
	ExportFull: "Our export depots are full. We must increase their space if we are to export at full capacity.",
	priceCapProblem: "The current price is below your price cap. To trade, you must disable or decrease the price cap.",
	NoPrice: "There is no one willing to buy this resource. You must decrease either the tariff or the toll.",
},
settlement.room.infra.export.Gui: {
	NoResource: "No resource has been selected for export.",
},
settlement.room.infra.gate.ROOM_GATE: {
	Locked: "Locked. Subjects are unable to pass. Click to unlock.",
	Unlocked: "Unlocked. Subjects can pass, but not enemies. Click to lock gate for subjects.",
},
settlement.room.infra.importt.Gui: {
	TotalSpace: "Total Space",
	UsedSpace: "Used Space",
	Incoming: "Incoming Wares",
	Accepting: "Accepting",
},
settlement.room.infra.importt.ImportTally: {
	ImportProblem: "You don't have any import depots set to this resource. No automated importing can be done.",
	priceCapProblem: "The current cheapest buy price exceeds your set price cap. To trade, you must disable or increase the price cap.",
	ImportFull: "Our import depots are full. We must increase their space, or improve logistics, if we are to import more.",
	cantAfford: "You don't have enough credits. Trades are done in increments of 32. You need at least {0} credits to purchase a batch of this resource.",
	minMoney: "A purchase of a batch of 32 of this resource is not possible due to your treasury limit.",
},
settlement.room.infra.inn.Gui: {
	Guestbook: "Guestbook",
},
settlement.room.infra.janitor.Gui: {
	Resources: "Stored Resources",
	Global: "Daily global consumption estimate.",
	Bad: "This resource can not be reached by this room, and maintenance requiring it can not be performed.",
},
settlement.room.infra.logistics.MoveDic: {
	capacityD: "Used Capacity",
	allocatedCrates: "Allocated Crates/Total crates",
	storing: "Storing",
	storingD: "When storing, this warehouse is closed to outsiders, and no one will use it as a source of goods. Does not affect pull/fetch orders from other storage rooms.",
	keep: "Keep Limit",
	keepD: "Other storage rooms will not be able to pull from this warehouse if the stored goods are below this limit.",
	fetch: "Fetch",
	fetchProblem: "There is nothing to fetch in the vicinity!",
	pullProblem: "Nothing can be pulled or fetched!",
	fetchD: "When enabled, the warehouse workers will fetch odd resources from the ground and from production rooms within their radius.",
	fetching: "Fetching",
	fetchLim: "Fetch Limit.",
	fetchLimD: "This room will only fetch if the current storage is less than this limit.",
	crates: "Crates",
	capacity: "Capacity",
	capacityRes: "Capacity Reserved",
	Stored: "Stored",
	StoredD: "How much is stored in your warehouses.",
	StoredRes: "Stored Reserved",
},
settlement.room.infra.logistics.MoveOrderPull: {
	RoomInvalid: "The room to pull from is invalid",
	noRes: "No resources have been selected.",
	noResBoth: "Neither the source or destination room resources match the selected resources.",
	noResSource: "The pull source resources don't match the selected resources.",
	noResDest: "The destination room's resources doesn't match the selected resources.",
	noResSourceA: "The source room does not have any crates available of the selected resources.",
	noResDestA: "The destination room does not have any crates available of the the selected resources.",
	noResBothA: "Neither the source nor destination room have crates available.",
	cycle: "The order is cyclic. Resources will be moved back and forth.",
},
settlement.room.infra.logistics.MoveOrderPullUI: {
	name: "Pull Source",
	notSet: "not set",
	notSetC: "Click to set the pull source storage site.",
	setC: "Click to go to pull source.",
	issue: "Click to issue an order to pull from another storage site.",
	Choose: "Choose a storage site to pull from.",
	Limit: "Pull Limit",
	LimitD: "Only pull when the source storage exceeds this limit.",
	auto: "Set next order to closest source.",
	hold: "Hold {0} to move to source room. Click to select source room.",
},
settlement.room.infra.logistics.MoveOrderPush: {
	RoomInvalid: "The destination room is invalid.",
	ResNone: "No resource have been specified.",
	ResBad: "The resources specified can not be accepted by the destination room.",
	ResANone: "There are not enough resources stocked to deliver.",
	ResANoneDest: "The destination does not have the capacity to accept a delivery.",
},
settlement.room.infra.logistics.MoveOrderPushUI: {
	notSet: "not set",
	notSetC: "Click to set a storage site to push to.",
	setC: "Click to go to push destination.",
	issue: "Click to issue a push order, which will deliver resources to another storage site.",
	name: "Push Destination",
	Choose: "Choose a storage site to push to.",
	NoneSeclected: "No push destinations have been set.",
},
settlement.room.infra.stockpile.Gui: {
	special: "This setting locks usage to a single crate and lets you precisely dictate the maximum amount of items to be stored.",
},
settlement.room.infra.stockpile.ROOM_STOCKPILE: {
	bname: "Carry Capacity",
	bdesc: "Carry Capacity of all logistics workers.",
},
settlement.room.infra.transport.Cart: {
	organise: "Organizing",
	Transporting: "Transporting",
},
settlement.room.knowledge.laboratory.ROOM_LABORATORY: {
	TargetD: "Estimation of how much knowledge can be produced and maintained:",
},
settlement.room.knowledge.library.ROOM_LIBRARY: {
	TargetD: "Estimation of how much knowledge will be produced.",
	name: "Knowledge",
},
settlement.room.knowledge.school.Gui: {
	learningRate: "Learning Rate",
	learningRateI: "{0}% / day",
},
settlement.room.knowledge.university.Gui: {
	learningRate: "Learning Rate",
	learningRateI: "{0}% / day",
},
settlement.room.knowledge.university.ROOM_UNIVERSITY: {
	iName: "Knowledge limit",
	iDesc: "The maximum knowledge to teach. Subjects that are above this knowledge limit will not attend this service.",
	bonus: "Learning speed of: ",
},
settlement.room.law.guard.Gui: {
	effDesc: "Determines radius and thus chance to apprehend criminals and deter crime.",
},
settlement.room.law.prison.Gui: {
	Food: "Food To Fetch",
	setAll: "Sentence all prisoners to be: {0}",
	setSure: "Are you sure you wish to inflict the punishment: {0} on all prisoners?",
	mWTitle: "Security low",
	mWBody: "Since our prisons are poorly staffed or poorly supplied with food, we are running the risk of having incidents occur. Make sure they are fully staffed and have access to food.",
	mTitle: "Prisoner Escape!",
	mBody: "Since our prison was poorly staffed and tended, the prisoners have escaped!",
	emp: "Insufficient employees or lack of food might cause incidents. Full employment is required.",
	cancel: "Cancel all manually assigned punishments, and let the prisoners be punished according to your law settings.",
},
settlement.room.law.stockade.Constructor: {
	Problem: "Must be facing the edge of the room.",
	Problem3: "Will be blocked by walls.",
	TooThin: "Area is too thin at places. Expand the area to at least 3x3.",
},
settlement.room.law.stockade.Gui: {
	Food: "Food To Fetch",
	setAll: "Sentence all captives to be: {0}.",
	setSure: "Are you sure you wish to inflict the punishment: {0} on all captives?",
	mWTitle: "Security low",
	mWBody: "Since our stockades are poorly staffed or poorly supplied with food, we are running the risk of incidents occurring.",
	mTitle: "Prisoner Escape!",
	mBody: "Since our stockade was poorly staffed and tended, the prisoners have escaped!",
	emp: "Insufficient employees or lack of food might cause incidents. Full employment is required.",
	cancel: "Cancel all manually assigned punishments, and let the prisoners be punished according to your law settings.",
},
settlement.room.main.BonusExperience: {
	name: "Experience",
	mGainedTitle: "Experience Gained",
	mGainedBody: "We now employ over {0} in our {1}, and as a result, this combined experience is boosting performance. Boosting will continue to increase up until {2} employees.",
	mLostTitle: "Experience Lost",
	mLostBody: "Since the employees of our {0} have plummeted, performance boosts from experience has been lost.",
},
settlement.room.main.category.RoomCategories: {
	other: "Other",
	Mines: "Mines",
	Refining: "Refining",
	Crafting: "Crafting",
	Law: "Law",
	Farms: "Farms",
	Aquaculture: "Aquaculture",
	Husbandry: "Husbandry",
	Military: "Military",
	Administration: "Administration",
	Procreation: "Procreation",
	Decorations: "Decorations",
	Logistics: "Logistics",
	Water: "Water",
	Religion: "Religion",
	Distribution: "Distribution",
	Health: "Health",
	Entertainment: "Entertainment",
	Afterlife: "Afterlife",
	Home: "Home",
	Agriculture: "Agriculture",
	Work: "Work",
	Service: "Service",
	Government: "Government",
	Jobs: "Jobs",
},
settlement.room.main.construction.ConstructionHoverer: {
	prog: "Construction",
	clear: "Cleared",
	Mat: "Materials",
	Act: "Dormant. Activate to commence work",
	Broken: "The room is broken. You can order your minions to repair it with the repair or activate job tool.",
	resources: "This construction needs {0} to complete, which is unobtainable in your city.",
},
settlement.room.main.construction.ConstructionInstance: {
	Construction: "Construction",
	Broken: "Broken",
},
settlement.room.main.copy.BSwap: {
	swap: "Switch to another type of room.",
},
settlement.room.main.copy.Copier: {
	name: "Room Copier",
	IncludeWalls: "Include Walls",
	desc: "Copies already planned rooms.",
	indoor: "This room requires to be built indoors and you must pick a structure type.",
},
settlement.room.main.employment.RoomEmploymentIns: {
	Workload: "Work-load",
	WorkloadD: "How busy your employees are. If workload is low, it means some of the workers have nothing to do and are wasting their time. Possible causes of this are that there simply isn't enough work, or that the room is missing resources to work with. If workload is 100%, your workers might have too much to do and the room might need to have more workers allocated.",
	Proximity: "Proximity",
	ProximityD: "An average of how much time is spent for the workers to walk to their workplace, as well as spending time hauling resources as opposed to working.",
},
settlement.room.main.employment.RoomEquip: {
	equipment: "Equipment",
	equipmentD: "Equipment boosts the efficiency of rooms. When equipped, each {0} degrades with a rate of {1} % per day.",
},
settlement.room.main.furnisher.FurnisherStat: {
	Services: "Services",
	serviceDesc: "Total amount of people that can be served simultaneously. The other (number) is an estimate of how many subjects the room will be able to serve, derived from your subjects' properties.",
	productionD: "Estimation of daily output of resources.",
	Efficiency: "Efficiency",
	EfficiencyD: "Efficiency is increased by certain items and can increase the usefulness of the room.",
	employeesD: "The amount of subjects needed to operate this room. The room might require less or more workers depending on circumstances.",
	wdesc: "Irrigation is gained through sweet water access. It can be improved after construction.",
},
settlement.room.main.placement.PlacerArea: {
	name: "Expand Room",
	shrink: "Shrink Room",
},
settlement.room.main.placement.PlacerDoor: {
	name: "Place Doorway",
	shrink: "Remove Doorway",
	cp: "Room will be blocked! Place doorways so that the room can be entered from the outside",
},
settlement.room.main.placement.PlacerItemArea: {
	undo: "Remove Item",
},
settlement.room.main.placement.PlacerItemSingle: {
	undo: "Remove Item",
},
settlement.room.main.placement.UtilPlacability: {
	TooSmall: "The area designated is too small.",
	NotEnoughItems: "This room plan has insufficient: {0} items. Place more items inside the shape to continue.",
	NotEnough: "This room will have insufficient {0}. Either the shape needs to be expanded, or more items need to placed.",
	Disconnected: "Area must be connected!",
	BlockingSelf: "Items are cutting off room. Make sure the room can be reached from the outside.",
	NotInside: "Must be placed inside the designated area. You must expand the area before you can place items.",
	NotBlockOther: "Must not block other item.",
	WillBeBlock: "Must not be blocked by other items.",
	WillBlockRoom: "Area is not connected, or an item is cutting off part of the room.",
	ItemsREached: "Max amount of this item is reached.",
	ItemMustREac: "Item must be reachable.",
},
settlement.room.main.RoomBlueprintIns: {
	Desc: "Production speed of: {0}",
},
settlement.room.main.throne.InstanceConstruction: {
	name: "Throne Construction",
},
settlement.room.main.throne.Placer: {
	name: "Move Throne",
	desc: "Creates a new construction site that will become the new throne room when finished. The throne is the center of your city and subjects that don't have a clear path to it will function poorly.",
},
settlement.room.main.util.Deleter: {
	name: "Dismantle Room",
	desc: "Dismantle room, recovering some of the resources used to build it. Cannot be undone.",
},
settlement.room.main.util.RoomIsolation: {
	desc: "Insulation prevents room degradation and sound pollution. Surrounding walls increase insulation, while doors and gaps decrease it. Poorly insulated rooms need more maintenance. Poorly insulated homes degrade furniture faster.",
},
settlement.room.military.artillery.ROOM_ARTILLERY: {
	control: "Control artillery piece in the battle view.",
},
settlement.room.military.supply.Gui: {
	away: "Shipments Underway",
	ready: "Wagons ready",
	liveStockD: "A {0} is used up for every 10th trip.",
	consumed: "Daily Consumption",
	needed: "Needed Delivery",
	underway: "Deliveries Underway",
	possible: "Possible",
	possibleD: "Some armies can not currently be supplied. To be supplied they need to be fortified and in own or allied territory.",
	closedD: "Your capitol is closed and deliveries can not be undertaken.",
},
settlement.room.military.training.Gui: {
	Limit: "Recruits limit",
	LimitD: "The number of recruits that you allow to train simultaneously.",
	speed: "Training Speed",
	speedD: "The speed at which subjects are trained.",
	maxLevel: "Days to reach max level: ",
},
settlement.room.military.training.ROOM_M_TRAINER: {
	Speed: "Speed of:",
},
settlement.room.service.arena.grand.ArenaConstructor: {
	notRec: "The blueprint must be in the shape of a rectangle",
	small: "This is too small to be considered a grand arena. Minimum dimensions are 24 x 24 tiles.",
	onEdge: "Entrance must be placed on the edge of the room.",
	onEdgeC: "Entrance must be placed in the center of an edge of the room.",
},
settlement.room.service.arena.RoomArenaGui: {
	Executions: "Executions",
	ExecutionsD: "The amount of prisoners that are currently being executed.",
},
settlement.room.service.food.canteen.Gui: {
	Food: "Meals",
},
settlement.room.service.food.eatery.Gui: {
	Food: "Food",
	Amount: "Amount",
	Incoming: "Incoming",
	Consumed: "Consumed",
	uses: "Some or all stands are distributing this food. Click to disable this resource for all.",
	usesN: "No stands are distributing this food. Click to enable it for all",
},
settlement.room.service.food.tavern.Gui: {
	Food: "Drinks",
	Amount: "Amount",
	Incoming: "Incoming",
	uses: "Some or all taverns are distributing this drink. Click to disable this resource for all.",
	usesN: "No taverns are distributing this drink. Click to enable it for all",
},
settlement.room.service.market.Gui: {
	Food: "Wares",
	Amount: "Amount",
	Incoming: "Incoming",
	uses: "Some or all markets are selling this resource. Click to disable this resource for all.",
	usesN: "No markets are selling this resource. Click to enable it for all",
},
settlement.room.service.nursery.Gui: {
	next: "Next child: (days)",
	capabilitityG: "Children (Max)",
	capabilitityGD: "Your global amount of infants and children and the amount your city can support at any given time. The support is based on the amount of free citizens of this species that reside in your city.",
	capabilitity: "Capacity (Local)",
	problemLimitG: "Your current child and infant population exceeds the global limit that is set. No new breeding can take place.",
	problemMax: "Your current child and infant population exceeds the global capacity. No new breeding can take place.",
},
settlement.room.spirit.dump.Constructor: {
	TooThin: "Area is too thin at places. Expand the area to at least 3x3 everywhere.",
},
settlement.room.spirit.dump.ROOM_DUMP: {
	RemoveProblem: "This resting place still holds the dead and can not be removed. Deactivate the room and allow the corpses to decompose peacefully. Current cadavers: {0}. Days until clear: {1}.",
},
settlement.room.spirit.grave.GraveData: {
	Respect: "Respect",
	RespectD: "Respect is gained by furnishing your rooms properly.",
	Disturbance: "Grave Disturbance",
	DisturbanceD: "Disturbance happens when a occupied burial service is removed or broken. It will slowly decrease with time as subjects forget. Deactivate the room first and let the remains dissipate before removing them.",
	Burried: "Buried",
	BurriedD: "The amount of subjects successfully buried recently.",
	Corpses: "Failed",
	CorpsesD: "The amount of corpses that have failed to be buried recently.",
	Value: "Value",
	ValueD: "The value is the partition of successfully buried multiplied with respect and degrade.",
	Total: "Total Graves",
	TotalD: "Total amount of graves.",
	Available: "Available",
	AvailableD: "Available Graves.",
},
settlement.room.spirit.temple.Gui: {
	Respect: "The respect value of this temple. It is a combination of Sacrifices, room layout and priests.",
	Sacrifice: "Sacrificing",
	SacrificeD: "Sacrificed",
	SacrificeYearD: "Sacrificed this year.",
	SacrificingD: "How well this temple is sacrificing. In order to sacrifice, the priests must have access to resources. The temple requires {0} sacrifices per day.",
	SacrificingHuman: "This temple sacrifices prisoners. Currently there is a supply of {0} prisoners.",
	SacrificingAnimal: "This temple sacrifices animals. Livestock is needed",
	SacrificingResource: "This temple sacrifices {0}.",
	NoSacrifices: "No sacrifices are available!",
	PriestsD: "The staffing of this temple. Has an effect on respect. Temples must be fully staffed.",
},
settlement.room.water.Canal: {
	problem: "Currently not operational. Make sure it's connected to a water pump's outlet, and that the connected pumps produce enough flow to reach it.",
	ok: "Operational",
},
settlement.room.water.pool.ROOM_POOL: {
	problem: "Has no fresh water access and is not functional. Must be adjacent to a functioning canal to operate.",
	ok: "Operational",
	available: "Available for a swim",
	unavailable: "Unavailable for a swim",
},
settlement.room.water.PumpConstructor: {
	GroundD: "Must be placed where there is ground water, close to natural bodies of water.",
},
settlement.room.water.PumpGui: {
	Workers: "Work Value",
	Preasure: "Pressure (tiles)",
},
settlement.room.water.ROOM_WATER: {
	irrigation: "Water Supply",
},
settlement.stats.colls.StatsAccess: {
	name: "Other",
	desc: "Access to different environments.",
	nameA: "Decorations",
	descA: "Access to different Decoration.",
	MonumentsD: "The value is based on access, upgrade and general decoration degrade in your city. The access can be higher than 100%, in which case it will compensate in places where there is no access.",
	MonumentsDeg: "Degrade",
	Upgrade: "Upgrade",
	UpgradeDesc: "The access to upgraded variants of this decoration.",
},
settlement.stats.colls.StatsBattle: {
	name: "Battle",
	desc: "Battle related stats",
	Basic: "Basic Training",
	BasicD: "Basic training is acquired in any type of training room and is required to be able to join a division.",
	Division: "Division",
	DivisionD: "The Army Division this subject belongs to.",
	Recruit: "Recruit",
	RecruitD: "The Army Division this subject will join when training is complete.",
},
settlement.stats.colls.StatsBurial: {
	more: "We want better prospects of being buried in a {0}.",
	less: "We do not wish to be buried in a {0}.",
	name: "Burial",
	desc: "Stats related to afterlife.",
},
settlement.stats.colls.StatsEducation: {
	pname: "Indoctrinate",
	pdesc: "Teach nothing much other than how glorious you, and your kingdom is. Will make your citizens more submissive",
	name: "Education",
	desc: "Stats regarding your education levels, and boosts surrounding it.",
},
settlement.stats.colls.StatsEnv: {
	name: "Environment",
	desc: "External factors",
},
settlement.stats.colls.StatsFood: {
	name: "Food",
	desc: "Stats related to food and hunger.",
	RationsT: "Target Food servings.",
	DrinkT: "Target Drink servings",
},
settlement.stats.colls.StatsGovern: {
	name: "Government",
	desc: "Government stats",
},
settlement.stats.colls.StatsHome: {
	desc: "This subject's place of residence.",
	name: "Housing",
	descc: "Housing related stats.",
},
settlement.stats.colls.StatsNeeds: {
	desc: "The current {0} need of a subject. As it increases, subjects will search out related services.",
	name: "Needs",
	descc: "Needs related stats",
},
settlement.stats.colls.StatsPopulation: {
	name: "Population",
	desc: "Statistics regarding population.",
	Demography: "Demography",
	DemographyDesc: "The different age groups of your citizens",
},
settlement.stats.colls.StatsReligion: {
	religion: "Religion",
	religionD: "Affiliated religion.",
	followers: "Followers",
	followersD: "The amount of followers for this religion.",
	access: "Access",
	accessD: "The Access of:",
	value: "Quality",
	valueD: "The quality of:",
	Temple: "Temple",
	Shrine: "Shrine",
	name: "Religion",
	desc: "Stats related to religion and afterlife.",
},
settlement.stats.colls.StatsStored: {
	descc: "The amount of resources stored in warehouses per capita.",
	more: "{0}, we need more of it.",
	name: "Storage",
	desc: "How many items are stored per capita.",
},
settlement.stats.colls.StatsTraits: {
	Trait: "Trait",
	Traits: "Traits",
	TraitDesc: "Traits can manifest themselves in individual subjects and in turn change properties of said person.",
},
settlement.stats.colls.StatsWork: {
	lim: "Decree",
	estimated: "Estimated Retirees",
	employment: "Employment",
	employmentD: "This subject's place of work.",
	retTarget: "Retirement age target",
	accessD: "Access to retirement activities.",
	qualityD: "Quality and Degrade of retirement activities.",
	Type: "Type",
	TypeD: "Subjects will try and find the activity that suits them best. (Highest work fulfillment)\",
	name: "Work",
	desc: "Work related stats.",
},
settlement.stats.disease.BoostsHealth: {
	entries: "New arrivals",
},
settlement.stats.disease.StatsDisease: {
	name: "Disease",
	desc: "Disease stats.",
},
settlement.stats.equip.EquipBattle: {
	combineProblem: "Can not be combined with current equipment.",
},
settlement.stats.equip.EquipCivic: {
	more: "We would like to be allowed to wear more {0}.",
},
settlement.stats.equip.EquipRange: {
	ammoC: "Ammunition (Current)",
	ammoR: "Am. Replenish Time (hours)",
	ammoU: "Unlimited ammunition!",
	AmmoDesc: "Ammunition is used by range weapons.",
},
settlement.stats.equip.StatsEquip: {
	name: "Equipment",
	desc: "Having your subjects equip certain items can boost them in different ways. It can also improve happiness amongst them.",
	Level: "{0} Level",
	Target: "{0} Target",
	Level_desc: "The target number of items each individual should equip.",
	Wear: "Wear-out rate per item and year:",
},
settlement.stats.law.Curfew: {
	name: "Curfew",
	desc: "When a curfew is active, subjects will not visit their ordinary jobs, and stay home or inside, except when they need to visit basic services. This deters criminals, and prevents disease from being spread.",
},
settlement.stats.law.LawRate: {
	popSize: "Population Size",
	desc: "Law prevents crime and makes your subjects feel safe. The most important aspect is to catch the criminals. You can then process them as you see fit, with harsher punishments decreasing crime further. Law is determined by the effective rates of your arrests and punishments. The effective rate is the average of an 8-day period.",
},
settlement.stats.law.StatsLaw: {
	name: "Law",
	descc: "Statistics regarding law",
},
settlement.stats.service.StatServiceImp: {
	Access: "Access",
	AcessDesc: "The level of access this subject has to a service. Can be improved by building more service facilities and making sure they are close enough for your people to utilize.",
	Quality: "Quality",
	QualityDesc: "The quality of a subject's last visit to this facility. Often improved by placing special items in the rooms in question.",
	Distance: "Proximity",
	DistanceDesc: "The distance the subject has had to walk to reach it determines proximity. This value only reaches 100% if subjects are right next to the service at all times. Typically values around 80% are considered good.",
	TotalDesc: "The access and quality this subject group has. Can be improved by building more facilities, keeping them maintained, and also in some cases building them well.",
	UpDesc: "The current upgrade boost from the rooms visited. Some rooms don't have upgrades.",
	More: "We want better access to {0}, of good quality.",
	perm: "Permission",
},
settlement.stats.service.StatServiceMourn: {
	name: "Graves",
	desc: "Fulfilled by having grave sites where subjects can mourn their fallen.",
},
settlement.stats.service.StatServiceSkinny: {
	name: "Skinnydipping",
	desc: "When the weather allows for it, subjects might want to have a dip in a pool of water.",
},
settlement.stats.service.StatServiceStock: {
	name: "Stocking",
	desc: "Fulfilled by having stocks filled with humiliated prisoners.",
},
settlement.stats.service.StatsService: {
	name: "Services",
	descc: "Services are provided by building service rooms and allowing access to your subjects.",
},
settlement.stats.standing.StandingBuff: {
	Emmergency: "Emergency",
},
settlement.stats.standing.StandingCitizen: {
	Loyalty: "Loyalty",
	loyalty_desc: "The overall loyalty of your citizens. The goal of any despot is to keep this high. Lower loyalty than 100% could lead to bloody riots. Happiness is a big factor, but other means exist...",
	Submission-Target: "Submission-Target",
	submissionTarget_desc: "What your submission will be in a few days.",
	Happiness: "Happiness",
	happiness_desc: "Happiness is fulfillment in proportion to expectations. Fulfillment is gained by providing services and a just rule. Expectation is the amount of citizens in your city. Happiness boosts submission and promotes immigration.",
	Fulfillment: "Fulfillment",
	full_desc: "A fulfillment modifier can be access to a tavern, or a road, or increased food servings. Each race have different weights tied to each modifier. Focus should be on the biggest modifiers first. Total Fulfillment is an exponential function of the sum of all your fulfillment modifiers divided by the sum of all max fulfillments.",
	Expectations: "Expectations",
	exp_desc: "As your population grows, so will your subjects' expectations. Expectation is tied to a species occurrence in the climate you've chosen to settle and grows linearly.",
},
settlement.stats.standing.StandingSlave: {
	Submission: "Submission",
	SubmissionD: "The submission of your slaves. Low submission can lead to uprisings. Submission is gained by providing fulfillment for your slaves and keeping their numbers down relative to your citizen population. Different species also have different submission properties.",
	Fulfillment: "Fulfillment",
	FulfillmentD: "Slaves wants some comfort, same as the next person. In order to keep your slaves submissive, you must provide some basic services for them.",
	Numbers: "Numbers",
	Army: "Army",
},
settlement.stats.STATS: {
	Status: "Status",
	desc: "Miscellaneous statistics about your city. Some affecting your subject's happiness.",
	random: "Random Chance",
},
settlement.stats.SValues: {
	player: "Chosen Race",
	playerIs: "Faction is:",
	oddjobs: "Odd jobs exist",
},
settlement.stats.util.StatHoverer: {
	Liked: "This is liked by your {0}. Higher value = more fulfillment.",
	Dislike: "This is disliked by your {0}. Higher value = less fulfillment.",
	DontCare: "Your {0} don't care about this and its value has no effect on fulfillment",
	ValueCurrent: "Current value: ",
	FulfillmentValue: "Current Fulfillment: ",
	HistoryValue: "History Value (days)",
	HistoryFulfillment: "History Fulfillment (days)",
	toReachMAx: "To reach max fulfillment, value needs to be : {0}%",
},
settlement.thing.halfEntity.caravan.Caravan: {
	Caravan: "Caravan",
},
settlement.thing.halfEntity.caravan.TypeDelivier: {
	name: "delivering",
},
settlement.thing.halfEntity.caravan.TypeDelivierStorage: {
	name: "delivering",
},
settlement.thing.halfEntity.caravan.TypeExport: {
	verb: "fetching",
},
settlement.thing.projectiles.Projectile: {
	name: "Projectile",
	splashDamage: "Splash Damage (tiles)",
	Range: "Range (tiles)",
	Accuracy: "Accuracy",
	Reload: "Fire Rate (seconds)",
	Arch: "Max angle (degrees)",
},
settlement.thing.projectiles.SProjectiles: {
	OUT_OF_RANGE: "Out of range!",
	FRIENDLIES: "Ally subjects are in the trajectory and might get hit!",
	TERRAIN: "Trajectory blocked by terrain",
},
settlement.thing.ThingsCadavers: {
	name: "Cadaver",
	noRes: "No resources",
},
settlement.thing.ThingsCorpses: {
	burrial: "Burial Site",
	onlyMassGrave: "This corpse can only be dumped in a mass grave.",
	inDanger: "This corpse is in a dangerous zone, and will not be fetched.",
	noClaim: "No one has claimed these remains. Build more burial sites.",
	Cause: "Death Cause:",
	Corpse: "Remains",
},
settlement.tilemap.generator.Generator: {
	Generating: "Generating",
},
settlement.tilemap.growth.Fertility: {
	name: "Fertility",
},
settlement.tilemap.GuiTerrainHoverInfo: {
	Degrade: "Degrade:",
	Strength: "Strength:",
	Border: "This is a static entry point to your city. Keep this clear and reachable.",
	Fertility: "Base Fertility: {0}%",
},
settlement.tilemap.terrain.TDestroyed: {
	broken: "broken {0}",
},
settlement.tilemap.terrain.TerrainDiagonal: {
	name: "Make Diagonal",
	desc: "Turns walls diagonal, only for aesthetic purposes.",
	undo: "Make Rectangular",
	undoDesc: "Turns walls rectangular, only for aesthetic purposes.",
	problem: "Must be placed on a wall like structure or a road.",
},
settlement.tilemap.terrain.TFlower: {
	name: "Flower",
},
settlement.tilemap.terrain.TForest: {
	name: "Tree",
},
settlement.tilemap.terrain.TFortification: {
	stairs: "Stairs",
},
settlement.tilemap.terrain.TGrowable: {
	Ripe: "(Ripe)",
	RipeNot: "(Not Ripe)",
	Name: "Wild {0}",
},
settlement.tilemap.terrain.TMushroom: {
	name: "Shrooms",
},
settlement.tilemap.terrain.TWater: {
	name: "Water",
	nameDeep: "Deep Water",
	nameBridge: "Bridge",
},
settlement.weather.WeatherClouds: {
	name: "Clouds",
	desc: "The amount of clouds.",
},
settlement.weather.WeatherDownfall: {
	name: "Downfall",
	desc: "The amount of downfall.",
},
settlement.weather.WeatherGrowth: {
	name: "Growth",
	desc: "The growth of plants.",
},
settlement.weather.WeatherIce: {
	name: "Ice",
	desc: "Amount of ice on the water.",
},
settlement.weather.WeatherMoisture: {
	name: "Moisture",
	desc: "The moisture content of the ground. Low moisture can cause plant-life and crops to shrivel. Moisture is gained by rainfall and will evaporate with high outside temperature.",
	mTitle: "Drought!",
	mBody: "The gods have forsaken {0}, and the rains have stopped. If this keeps up, it will devastate our crops!. Everyone must now pray.",
},
settlement.weather.WeatherSnow: {
	name: "Snow",
	desc: "Amount of snow on the ground",
},
settlement.weather.WeatherTemp: {
	format: "~",
	name: "Temperature",
	desc: "Temperature is determined by climate, season and chance. Extreme temperature on either end causes your subjects to be exposed and can lead to death. Hearths warm subjects. Well usage, or skinny dipping in bodies of water cools subjects. Clothes help greatly with both warmth and cold.",
},
settlement.weather.WeatherThunder: {
	name: "Thunder",
	desc: "The amount of thunder.",
},
settlement.weather.WeatherWind: {
	name: "Wind",
	desc: "Wind Strength",
},
util.dic.Dic: {
	Accept: "Accept",
	Access: "Access",
	AccidentRate: "Accident Rate",
	AccidentRateD: "The rough chance of someone getting injured or killed in an accident in any of your rooms yearly.",
	Activate: "Activate",
	Activated: "Activated",
	Addative: "Additive",
	Admin: "Admin",
	AdultAge: "Adult at Day:",
	Age: "Age:",
	Alert: "Alert",
	All: "All",
	Allocated: "Allocated",
	Ammunition: "Ammunition",
	Amount: "Amount",
	Animals: "Animals",
	Area: "Area",
	Armies: "Armies",
	Army: "Army",
	Artillery: "Artillery",
	Assault: "Assault",
	AtWar: "At War",
	Attack: "Attack",
	Attacking: "Attacking",
	Available: "Available",
	Baby: "Infant",
	Babies: "Infants",
	Back: "Back",
	Balance: "Balance",
	Banner: "Banner",
	Base: "Base",
	Battle: "Battle",
	BattleOf: "Battle of {0}",
	Besiege: "Besiege",
	Broken: "Broken",
	Besieging: "Besieging",
	BesiegingSomething: "Besieging {0}",
	Biome: "Biome",
	Boosts: "Boosts",
	Bought: "Bought",
	BoundFor: "Bound For {0}",
	Buildings: "Buildings",
	Buy: "Buy",
	Buyers: "Buyers",
	Campaigning: "Campaigning",
	CampaigningD: "Soldiers that are out campaigning.",
	Capacity: "Capacity",
	Capitol: "Capital",
	CapitolYou: "Your Capital",
	CaptivesD: "Captives from the battle. You can decide how many you want to accept into your city as prisoners. The rest will be disposed. Take heed that stockades are needed as a first step to process these captives.",
	Caravan: "Caravan",
	Casualties: "Casualties",
	Civics: "Civics",
	Clear: "Clear",
	Close: "Close",
	Conscriptable: "Conscriptable",
	Conscripts: "Conscripts",
	ConscriptsD: "Conscripts are the population available to draft into armies, minus the ones already drafted. The max amount is determined by your regions, and with time, your actual conscripts will increase towards this target. If no fresh conscripts exist no new divisions can be trained and existing ones will not replenish.",
	Consumed: "Consumed",
	ConsumptionRate: "Consumption Rate",
	Copy: "Copy",
	Cost: "Cost",
	Count: "Count",
	Court: "Court",
	Create: "Create",
	Crime: "Crime",
	Curr: "Denari",
	Current: "Current",
	Currs: "Denari",
	CreditScore: "Purchasing Power",
	CreditScoreD: "When a faction spends money on imports, its purchasing power will drop, leading to prices dropping overall. The opposite is also true for money earned through exports",
	Deactivate: "Deactivate",
	Deactivated: "Deactivated",
	DeclareWar: "Declare War",
	Decline: "Decline",
	Defences: "Defenses",
	DefencesD: "Defenses are the product of your garrison and fortifications and this power can only be used in defence. When an army besieges a region, the garrison will decrease with time.",
	Defeat: "Defeat",
	Deaths: "Deaths",
	Degrade: "Degrade",
	DegradeDesc: "Most rooms and roads require maintenance provided by a janitor. If not provided, they will degrade and function poorly. Some maintenance requires materials.",
	Disease: "Disease",
	Deployable: "Deployable",
	Destination: "Destination",
	Diplomacy: "Diplomacy",
	Disband: "Disband",
	Distance: "Distance",
	Distant: "Distant Faction",
	Division: "Division",
	Drinkable: "Drinkable",
	Earnings: "Earnings",
	Edible: "Edible",
	Edit: "Edit",
	Effects: "Effects",
	Efficiency: "Efficiency",
	Emits: "Emits",
	Employees: "Employees",
	Employment: "Employment",
	Encyclopedia: "Encyclopedia",
	Enemies: "Enemies",
	Enemy: "Enemy",
	Equipment: "Equipment",
	Equipped: "Equipped",
	Event: "Event",
	Expenses: "Expenses",
	Experience: "Experience",
	Exporting: "Exporting",
	Faction: "Faction",
	Factions: "Factions",
	Factors: "Factors",
	Favourite: "Favourite",
	Fertility: "Fertility",
	FertilityD: "Fertility increases farm, pasture, and orchard output and allows for more wild crops to grow.",
	Filter: "Filter",
	Food: "Food",
	ForSale: "For Sale",
	Formation: "Formation",
	Fort: "Fortifications",
	FortD: "Fortifications give a huge boost to the defence of the settlement. It can make a direct assault impossible until the defenders are tired out and starved.",
	Fortifications: "Fortifications",
	Fortified: "Fortified",
	Fortifying: "Fortifying",
	Free: "Free",
	From: "From",
	Garrison: "Garrison",
	GarrisonD: "Garrisons will prolong an enemy siege and provide more attrition to enemies located in the region.",
	General: "General",
	Generate: "Generate",
	Generating: "Generating",
	Growth: "Growth",
	Happiness: "Happiness",
	Health: "Health",
	High: "High",
	Home: "Home",
	HomeLess: "Homeless",
	Housing: "Housing",
	ImportLevel: "Import Level",
	Importable: "Importable",
	Inbound: "Inbound",
	Increase: "Increase",
	Info: "Info",
	InitialCost: "Initial Cost",
	Intercept: "Intercept",
	Intercepting: "Intercepting {0}",
	Isolation: "Insulation",
	Law: "Law",
	Less: "Less",
	Level: "Level",
	List: "List",
	Locked: "Locked",
	Losses: "Losses",
	Low: "Low",
	Maintenance: "Maintenance",
	MarchingTo: "Marching To {0}",
	Max: "Max",
	Menu: "Menu",
	Mercenaries: "Mercenaries",
	Messages: "Messages",
	Minerals: "Minerals",
	Minimum: "Minimum",
	Misc: "Misc.",
	Missing: "Missing",
	Modifiers: "Modifiers",
	Morale: "Morale",
	MoraleD: "Morale determines how long your troops will stand their ground for. Each division has an individual morale, that is also affected by a global one.",
	More: "More",
	MouseWheelAdd: " + Mousewheel",
	Move: "Move Army. Moving armies do not replenish or muster new men.",
	MoveCant: "Army can't move when there are no soldiers.",
	Moving: "Moving",
	Mods: "Mods",
	Multipliers: "Multipliers",
	MustBeOwnRegion: "Must be in a controlled region",
	Muster: "Muster",
	MusterDesc: "Muster Men. Calls to arm and have your subjects form up in their division and man artillery, or un-muster men and have them return to their civil duties.",
	MusterOneProblem: "One or more divisions do not have a position. Set a position by clicking the division, then click and drag on the ground where you want them.",
	MusterProblem: "The division do not have a position. Set a position by clicking the division, then click and drag on the ground where you want them.",
	Musterd: "Mustered",
	Needed: "Needed",
	Neighbours: "Neighbours",
	Net: "Net",
	NetWorth: "Net Worth",
	Neutral: "Neutral",
	Next: "Next",
	No: "No",
	Ruler: "Ruler",
	NoRuler: "Free Lands",
	None: "None",
	OK: "OK",
	OPTIONS: "OPTIONS",
	Occupation: "Occupation",
	Occurrence: "Occurrence",
	Oddjobber: "Oddjobber",
	Oddjobbers: "Oddjobbers",
	Rivalry: "Rivalry",
	RivalryD: "Your net worth against the faction's net worth determines rivalry, that dictates the aggression the faction will show towards you.",
	Organization: "Organisation",
	Outbound: "Outbound",
	Overlay: "Overlay",
	Overlays: "Overlays",
	Population: "Population",
	PlayTime: "PlayTime:",
	Power: "Power",
	Previous: "Previous",
	Price: "Price",
	PriceCap: "Price Cap",
	Priority: "Priority",
	Problem: "Problem",
	Produced: "Produced",
	Production: "Production",
	ProductionRate: "Production Rate",
	Progress: "Progress",
	Projectiles: "Projectiles",
	Properites: "Properties",
	Prospect: "Prospect",
	Punishment: "Punishment",
	Quality: "Quality",
	Raiding: "Raiding",
	Raiders: "Raiders",
	RaidingD: "When raiding an army will plunder the region they are in, gaining resources and slaves. Of course, it will not be appreciated by the owner.",
	Rarity: "Rarity",
	Rate: "Rate",
	ReadyFire: "Ready to Fire.",
	Realm: "Realm",
	Reassign: "Reassign",
	Rebels: "Rebels",
	Recruit: "Recruit",
	Recruits: "Recruits",
	Region: "Region",
	RegionDesc: "The world is made up of regions. Regions have people living in them, whose lives you can control if you manage to capture it. A region has an urban center, that can either be a town of a faction capital. You upgrade regions with administration points.",
	Regional: "Regional {0}",
	Regions: "Regions",
	Religion: "Religion",
	Reloading: "Reloading",
	ReloadingXX: "Unavailable. Reloading, ({0} seconds remaining)",
	Requirement: "Requirement",
	Requires: "Requires",
	Reset: "Reset",
	Resource: "Resource",
	Resources: "Resources",
	Reviews: "Reviews",
	Riches: "Riches",
	RightClick: "Right Click",
	SAVING: "SAVING",
	Search: "Search",
	Sell: "Sell",
	Sellers: "Sellers",
	Settings: "Settings",
	Settlement: "Settlement",
	Shape: "Shape",
	Showing: "Showing",
	Skill: "Skill",
	Sold: "Sold",
	Soldiers: "Soldiers",
	SoldiersTarget: "Soldiers Target",
	Sort: "Sort",
	Specification: "Specification",
	Speed: "Speed",
	SpoilRate: "Spoil-Rate",
	Spoilage: "Spoilage",
	Spoils: "Spoils",
	Spread: "Spread",
	Start: "Start",
	Stop: "Stop",
	Storage: "Storage",
	Stored: "Stored",
	Structures: "Structures",
	Subject: "Subject",
	Subjects: "Subjects",
	SupportRoom: "Support",
	Supplies: "Supplies",
	SuppliesD: "Campaigning armies requires supplies to function. Some are essential, while others only provide morale boosts.",
	Target: "Target",
	Tariff: "Tariff",
	TariffD: "Tariff is applied to the amount of work that has been put into a resource and deducted from a faction's buy price. The tariff depends on your current stance. Overloading a faction with a particular resource also increases tariff.",
	Taxes: "Taxes",
	Threat: "Threat",
	TechnologyShort: "Tech",
	Terrain: "Terrain",
	Timer: "Timer",
	To: "To",
	Toll: "Toll",
	TollD: "Toll is based on the distance between you and this faction. The toll is added to the sell price and subtracted from the buy price.",
	Total: "Total",
	Tools: "Tools",
	TotalCost: "Total Cost",
	Tourist: "Tourist",
	Tourists: "Tourists",
	Trade: "Trade",
	Treasury: "Treasury",
	Trespassing: "Trespassing Armies.",
	TrespassingD: "Trespassing enemy armies in your realm.",
	Type: "Type",
	Unavailable: "Unavailable",
	Undo: "Undo",
	Unitinfo: "Click and drag a unit to rearrange it in the army. Hold {0} to select several units. Hold {1} and click to toggle units.",
	Unlocks: "Unlocks",
	Unreachable: "Unreachable",
	Upgrade: "Upgrade",
	Upkeep: "Upkeep",
	Used: "Used",
	Value: "Value",
	Victory: "Victory",
	War: "War",
	WarD: "This faction is at war with you, and will send its armies after you until a peace is brokered.",
	Water: "Water",
	Workforce: "Workforce",
	WorkVerb: "Work",
	WorkShift: "Work Shift",
	WorkforceD: "Your rooms require employees to function. These workers will stick to their place of work. Those not employed are named 'oddjobbers'. These will do other jobs, such as building and clearing.",
	World: "World",
	Yes: "Yes",
	and: "and",
	basePrice: "Base Price",
	buyPrice: "Buy Price",
	avePrice: "Average Price",
	cancel: "cancel",
	confirm: "confirm",
	construction: "Construction",
	deep: "deep",
	delete: "delete",
	delta: "delta",
	floor: "floor",
	garrison: "garrison",
	global: "global",
	goods: "Goods",
	ground: "ground",
	havens: "havens",
	limit: "limit",
	load: "load",
	loading: "loading...",
	name: "name",
	new: "new",
	noTrade: "There are no traders of this resource available.",
	noTradePartners: "You have no trade agreements for this resource. An agreement must be reached through diplomacy with a neighbouring faction",
	normal: "normal",
	off: "off",
	on: "on",
	peace: "Peace Treaty",
	remove: "remove",
	rename: "rename",
	save: "save",
	sellPrice: "Sell Price",
	taxes: "Taxes",
	North: "North",
	NorthEast: "North-East",
	East: "East",
	SouthEast: "South-East",
	South: "South",
	SouthWest: "South-West",
	West: "West",
	NorthWest: "North-West",
	Central: "Central",
},
util.dic.DicTime: {
	Day: "Day",
	Days: "Days",
	Season: "Season",
	Seasons: "Seasons",
	Year: "Year",
	Years: "Years",
	Age: "Age",
	Ages: "Ages",
	Hour: "Hours",
	Hours: "Hours",
	Minute: "Minute",
	Minutes: "Minutes",
	Second: "Second",
	Seconds: "Seconds",
	Today: "Today",
	now: "now",
	1OfSomething: "1 {0}",
	MoreOfSomething: "{0} {1}",
	dateFormat: "Day {0} of {1}, Year {2} of the {3}",
	dateFormatShort: "{0}/{1} - {2} {3}",
	2SomethingAgo: "{0}, {1} ago",
	1SomethingAgo: "{0} ago",
	yearsDays: "{0} years, {1} days",
},
util.gui.common.BitmapSpriteEditor: {
	hovInfo: "Hold left mouse button to draw. Hold ({0}) to erase.",
},
util.gui.common.SuperSc: {
	name: "Super screenshot",
	desc: "A super screenshot generates a large image of the current view. It takes some time. Screenshots are saved in your local files. You can find them through the game launcher.",
	time: "Generate a screenshot every {0} in-game day. Older screenshots will be overwritten by new based on how many screenshots you keep",
	keep: "Save and keep {0} screenshot-files. If file amount is exceeded, they fill be overwritten.",
	sc: "Super Screenshot",
},
util.gui.misc.GChart: {
	current: "Current",
},
util.gui.misc.GColorPicker: {
	color: "color",
	red: "red",
	green: "green",
	blue: "blue",
},
util.gui.slider.GSliderInt: {
	setAmount: "Set amount",
	setAmountD: "Set amount {0}-{1}",
},
util.race.PERMISSION: {
	name: "Permission",
	desc: "Toggle permission",
},
view.battle.BattlePanel: {
	explanation: "In order to deploy and use your army, press the muster button to the left. Click and drag to select an area of troops, or click the unit cards. You can use control to toggle unit card selection and shift to select several.",
	restart: "restart",
	restartD: "Are you sure you want to start the battle over?",
	Retreat: "Retreat",
	RetreatD1: "Retreat and lose {0} soldiers.",
	RetreatD: "Are you sure you wish to retreat and lose {0} soldiers?",
	throneD: "When enemies are standing by the throne, this timer will tick down, and once it reaches 0, the battle will be lost.",
},
view.battle.BattlePlacerAttack: {
	AttackMelee: "Attack unit",
	AttackRanged: "Fire at unit",
	AttackMix: "Attack/fire at unit",
	AttackBuilding: "Attack Building",
	BombardBuilding: "Bombard Building",
	BombardArea: "Bombard Area",
},
view.battle.DivHoverer: {
	Standing: "Standing",
	Moving: "Moving",
	Engaging: "Engaging",
	Firing: "Firing",
	Building: "Attacking Structure",
	Charging: "Charging",
},
view.battle.UISelection: {
	dPosition: "To position your troops, left-click on the ground and hold.",
	dAdd: "To add troops to your selection, hold {0}, then click and drag over the additional troops.",
	dMove: "To reposition your troops, use the arrow keys ({0}).",
	dSpin: "To rotate your selection, hold  {0}, click and hold where the center should be.",
	dSelectAll: "To select all divisions, press {0}.",
	dStopAll: "Stop all divisions and clear targets ({0}).",
	dFireAtWill: "Toggle fire at will. Allows soldiers and artillery to fire at enemies within reach.",
	dFireStandGround: "When toggled, ranged units will not try to get into range of their targets, but will stay put, and only fire if the target is within range.",
	dGuard: "In guard mode soldiers will stay in formation when fighting. Increases defense, but decreases offence.",
	Attack: "To attack an enemy division, left click on it. If ranged, to attack an enemy division melee, hold {0} and left click.",
	MopUp: "When soldiers are in position, they'll break it and go chasing enemy soldiers or rioteers. Morale will be very weak while doing this.",
	FormationLoose: "Loose formation. Increases offence, but decreases defence.",
	FormationTight: "Tight formation. Increases defence, but decreases offence.",
	Run: "Makes soldiers move faster, but will also fatigue them faster.",
	Charge: "Soldiers will start running in their current direction until they reach an enemy or obstacle. Soldiers will not have a lot of defense, but have a lot of extra force when colliding, as well as scaring the enemy force.",
},
view.interrupter.ILoadScreen: {
	clickToContinue: "CLICK TO CONTINUE!",
},
view.keyboard.IChange: {
	Pick: "Pick a hotkey for:",
	Explanation: "Either press a single key, or press and hold a key to use as a modulator, then press another key. Hit escape to exit.",
	Sucess: "Hotkey {0} successfully mapped to {1}!",
	Fail: "Hotkey {0} is already in use by {1}, pick another one.",
	Overwritten: "{0} is now without a hotkey!",
},
view.keyboard.Key: {
	none: "---",
	hotkey: "Hotkey: ",
},
view.keyboard.KeyButt: {
	assign: "To assign a new hotkey to this function, press: ",
},
view.keyboard.KeyNames: {
	none: "---",
	unknown: "???",
	space: "space",
	escape: "escape",
	caps-lock: "caps-lock",
	scroll-lock: "scroll-lock",
	num-lock: "num-lock",
	pause: "pause",
	enter: "enter",
	tab: "tab",
	backspace: "backspace",
	insert: "insert",
	delete: "delete",
	right: "right",
	left: "left",
	down: "down",
	up: "up",
	page-up: "page-up",
	page-down: "page-down",
	home: "home",
	end: "end",
	print-screen: "print-screen",
	left-shift: "left-shift",
	left-ctrl: "left-ctrl",
	right-shift: "right-shift",
	right-ctrl: "right-ctrl",
	pad-enter: "pad-enter",
	pad-equals: "pad-equals",
	left-alt: "left-alt",
	left-super: "left-super",
	menu: "menu",
	right-alt: "right-alt",
	right-super: "right-super",
	F: "F{0}",
},
view.keyboard.KeyPageBattle: {
	Up: "Up",
	UpD: "Move selected Divisions.",
	Down: "Down",
	Left: "Left",
	Right: "Right",
	Select: "Select",
	SelectD: "Selects all divisions.",
	Show: "Show",
	ShowD: "Shows all division positions.",
},
view.keyboard.KeyPageMain: {
	Assign-hotkey: "Assign-hotkey",
	AssignD: "When hovering specific buttons, you can press this to assign a new hotkey for the button function.",
	Scroll-Left: "Scroll-Left",
	Scroll-LeftD: "Moves the map.",
	Scroll-Right: "Scroll-Right",
	Scroll-RightD: "Moves the map.",
	Scroll-Up: "Scroll-Up",
	Scroll-UpD: "Moves the map.",
	Scroll-Down: "Scroll-Down",
	Scroll-DownD: "Moves the map.",
	Zoom-In: "Zoom-In",
	Zoom-InD: "Zoom in (Mousewheel).",
	Zoom-Out: "Zoom-Out",
	Zoom-OutD: "Zoom out (Mousewheel).",
	Minimap: "Minimap",
	MinimapD: "Toggles the minimap.",
	Center: "Center",
	ThroneD: "Center the map on the throne or the capital.",
	Rotate: "Rotate",
	RotateD: "Rotates things.",
	Increase: "Increase",
	IncreaseD: "Increases size/cycle options.",
	Decrease: "Decrease",
	DecreaseD: "Increases size/cycle options.",
	Quicksave: "Quicksave",
	QuicksaveD: "Saves the game under the name 'Quicksave'.",
	Quick-Load: "Quick-Load",
	QuickLoadD: "Loads the latest save.",
	Pause: "Pause",
	PauseD: "Toggles game pause.",
	speed-paused: "speed-paused",
	speed-pausedD: "Sets 0 speed, thus pausing the game.",
	speed-normal: "speed-normal",
	speed-normalD: "Sets 1x speed. Double press for 1/4th speed.",
	speed-fast: "speed-fast",
	speed-fastD: "Sets 3x speed.",
	speed-fastest: "speed-fastest",
	speed-fastestD: "Sets 25x speed. Double press for x250 speed.",
	Slow-Up: "Slow-Up",
	Slow-UpD: "Slowly pans the map.",
	Slow-Down: "Slow-Down",
	Slow-DownD: "Slowly pans the map.",
	Slow-Left: "Slow-Left",
	Slow-LeftD: "Slowly pans the map.",
	Slow-Right: "Slow-Right",
	Slow-RightD: "Slowly pans the map-",
	Screenshot: "Screenshot",
	ScreenshotD: "Creates a screenshot, saved in your local files, reachable through the launcher -> info.",
	Stats: "Stats",
	StatsD: "Toggles stats.",
	Enter: "Enter",
	EnterD: "The enter key.",
	Backspace: "Backspace",
	BackspaceD: "The backspace key.",
	Escape: "Escape",
	EscapeD: "Toggles the menu, or closes panels.",
	mod: "mod",
	modD: "When pressed, modulates certain functions, such as the mouse wheel.",
	place-undo: "place-undo",
	place-undoD: "When pressed, lets you use alternative tools when using a tool.",
	toggle: "Toggle view",
	toggleD: "Toggle between world view and city view.",
},
view.menu.IMenu: {
	resume: "resume",
	quicksave: "quick-save",
	saveFirst: "save first?",
	options: "options",
	quitMenu: "quit to menu",
	exit: "exit",
	THEMENU: "THE MENU",
},
view.menu.IMenuSave: {
	¤nameYour: "Name your save-game",
	failed: "failed to be overwritten",
	success: "successfully overwritten",
	overwrite: "overwrite",
	successSave: "{0} successfully saved!",
	charsAllowed: "Only characters: {0} are allowed!",
	fail: "Save failed. See error report!",
},
view.menu.MenuScreen: {
	back: "< back",
},
view.menu.MenuScreenLoad: {
	name: "load",
	delete: "Delete Save?",
	deleteAll: "Delete Old",
	deleteAllD: "Delete {0} outdated saves forever? You might still be able to load them if you revert for an earlier version of the game.",
	prob: "Loading it may crash the game!",
	prob2: "It can not be loaded with the current version of the game.",
},
view.menu.ScKeys: {
	nameBig: "KEY SETTINGS",
	name: "key settings",
	restore: "restore",
	cancel: "cancel",
},
view.sett.SettViewStart: {
	Regenerate: "Regenerate",
	start: "Landing Party",
},
view.sett.ToolDefault: {
	clickJob: "Hold '{0}' and click to place more of job: ",
	clickRoom: "Hold '{0}' and click to build another: ",
	clickRoom2: "Hold '{0}' and click to copy this: ",
	reconstruct: "click to reconstruct rooms",
},
view.sett.ui.army.Actions: {
	LowSupplies: "Not enough supplies to send out. Fill up your Army Supply depots!",
	NoValid: "The selected division are already attached to a world army. You must recall them first.",
	Recall: "Recall",
	RecallD: "Recall these divisions from its world armies and have them return to the city. It will take a few days.",
	RecallProblem: "No divisions are selected that are currently attached to a world army.",
	SendOut: "Send Out",
	SendOutD: "Send this division to join an army on the world map. These soldiers will have to be supplied through your army depot.",
	SendOutToggleD: "When toggled, have soldiers leave for armies on the world map, even if they haven't reached their training target.",
	NotTrained: "Some of the soldiers are not fully trained to specification yet, and will continue to train before they join an army.",
	NoArmies: "There are no armies to send this division to. Recruit one on the world map.",
	NoDivs: "No divisions are selected.",
	DisbandD: "Are you sure you wish to disband {0} divisions?",
	Closed: "Our city is closed, we can not leave.",
	Transfer: "Soldiers of this division is still on route back to our city. We must wait until they return",
},
view.sett.ui.army.Edit: {
	title: "{0} divisions",
	Time: "The amount of days it will take to train this division to specification.",
},
view.sett.ui.army.Hoverer: {
	needs: "Needs to Train",
	fully: "Fully Trained",
	currently: "Currently Training",
	army: "Division is currently attached to the world army '{0}'. It must be recalled in order to be edited;",
	armyTime: "Division is returning home to our capitol. The soldiers will arrive in {0} days.",
},
view.sett.ui.army.Info: {
	RecruitD: "The amount of men currently training to be able to join a division.",
	SoldierD: "The amount of soldiers that are ready to be deployed in your city.",
},
view.sett.ui.bottom.BuildMain: {
	Build: "Build:",
	Fences: "Fences",
	Roads: "Roads",
	move: "Move",
	Construct: "Construct",
	jobs: "Jobs",
	jblue: "and click to place one of your saved blueprint.",
},
view.sett.ui.bottom.Options: {
	CopyArea: "Copy Area",
	Planning: "Planning",
	PlanningD: "When enabled, placed jobs will not be performed until manually activated by your grace.",
	Roadify: "Roadify",
	RoadifyD: "Allow buildings such as fences to visually try to match their tile to the roads around them.",
	printsD: "Add and manage saved blueprints.",
	Paint-tool: "Paint-tool",
	PlanToolD: "Paint the map in different colors. Has no impact on game-play",
},
view.sett.ui.bottom.RoomUpgrader: {
	name: "Room upgrade",
	desc: "Upgrade the rooms that can be upgraded.",
	UPGRADE_MAX_REACHED: "Maximally Upgraded.",
	RESOURCES: "Not enough resources.",
	noSelect: "No rooms selected that can be upgraded.",
},
view.sett.ui.bottom.UIBuildPanel: {
	Search: "Search",
	SearchD: "Search for tools and rooms",
},
view.sett.ui.bottom.UIRoomBuild: {
	cost: "Costs",
	production: "Production",
	optional: "(Optional)",
	Emits: "Emits",
	CurrentRooms: "Current Rooms",
	CurrentBelievers: "Current Worshippers",
},
view.sett.ui.food.UIFood: {
	expl: "The amount of days we can feed the population for. Note that this is a rough estimate. Many factors, such as trade, and production can affect this amount.",
},
view.sett.ui.health.UIHealth: {
	Diseases: "Known Diseases",
	Epidemic: "Current Epidemic",
},
view.sett.ui.home.UIHomeAssign: {
	name: "Assign",
	desc: "Lets you assign homes to specific criteria.",
	prob: "Must be placed on a house.",
	everyone: "Set permission for everyone",
	none: "Set permission for none",
	permission: "Set permission for:",
	permissionAll: "Set permission for All:",
},
view.sett.ui.home.UIHomeOdd: {
	name: "O-Mover",
	desc: "Oddjobbers will automatically move out if an employed subject needs their home. This tool manually moves random oddjobbers to desired housing.",
	prob: "Must be placed on a house with vacancies.",
	odd: "No oddjobbers to move!",
	oddNo: "There are no oddjobbers that can be moved into the specific house. They are either full, or their settings doesn't match the oddjobbers species and class.",
},
view.sett.ui.home.UIHomesFurniture: {
	Yearly: "{0} per item per year, estimation: -{1} in total per year.",
	CurrentlyUsed: "Currently Used",
	CurrentTarget: "Current Target",
	CurrentMax: "Current Maximum",
	manage: "Limits regarding what resources that can be used, is set in the subject panels respectively.",
},
view.sett.ui.home.UIHomesTable: {
	Housed: "Housed",
	HousedD: "Subjects that have a home. There might be a small delay between building new houses and having people move in.",
	Homeless: "Homeless",
	HomelessD: "Subjects that have looked for housing, yet have not found one. Oddjobbers will search for houses across the whole map. Employed people will search in the vicinity of their workplace.",
	HousingTotal: "Total Housing",
	HousingAvailable: "Available Housing",
	HousingAvailableD: "Available Housing of this type across the map. Note that these houses might be beyond the reach of employed people.",
	ClickToGoToFirstHomeless: "Click to go to a subject that has trouble finding a home.",
	FurnishClick: "Click to manage furnishing.",
},
view.sett.ui.law.Settings: {
	everyone: "Everyone (Overwrites all specific races)",
	rate: "Set target rate for:",
	toggle: "Toggle for:",
	Prosecute: "Are you sure you want to persecute your entire population of this race?",
	TargetRate: "Target Rate",
	CurrentRate: "Current Rate",
	PunishementSettings: "Punishment Settings",
	PunishementSettD: "Once you have caught the criminals, all you have to do is decide what to do with them. Different punishments have different effects. If no punishment is selected, or the facilities are inadequate, subjects will go into exile, which is bad for crime determent. Changing the settings will act on already imprisoned criminals, unless they have been specifically judged by your grace.",
	Deter: "Determent",
},
view.sett.ui.minimap.UIMiniHotSpots: {
	order: "ORDER",
	set: "Set Hotspot",
	setLong: "Sets a hotspot that can easily be navigated to with a single click.",
	setExp: "Left click to go to hotspot. Right click to edit.",
},
view.sett.ui.minimap.UIMinimapButtons: {
	hotspots: "Hot-spots",
	minipanels: "Mini Panels",
	ToggleOverlay: "Toggle Overlay: ",
	HideUI: "Cinematic mode + Hide UI. Cancel by right click or ESC.",
},
view.sett.ui.minimap.UIMiniRaces: {
	Desc: "An assortment of opinions from your citizens:",
	Double: "Double click to grant access to all immigrants. Right click to open immigration settings.",
},
view.sett.ui.minimap.UIMiniResources: {
	desc: "Click to open resource details, right click to go to warehouse.",
},
view.sett.ui.minimap.ViewMiniMapUI: {
	entities: "Color entities based on status",
},
view.sett.ui.noble.NobleRow: {
	Rank: "Current rank of this noble. More ranks allows a noble to contribute a lot more towards their current assignment. Ranks are gained by levelling up your city. A noble can not be stripped of ranks, but the ranks will become available after their death.",
	no: "Unassigned Nobility",
	assign: "Assign this noble to an office.",
},
view.sett.ui.noble.UINobles: {
	expla: "To assign another noble you must click a subject and elevate them from there.",
},
view.sett.ui.room.construction.SFrame: {
	{0} construction: "{0} construction",
	expensive: "The layout of the room will make it more expensive to construct and maintain. The yellow squares denote where support for the room is weak and will need extra materials. To increase support, remove some of the room in this area, so that it can be used to build supportive walls. Proceed anyway?",
	removeRoom: "remove room",
	undo: "undo",
	construct!: "construct!",
},
view.sett.ui.room.construction.Shared: {
	indoor: "This room requires to be built indoors and you must pick a structure type.",
},
view.sett.ui.room.construction.SItems: {
	Items: "items",
},
view.sett.ui.room.construction.SMaterial: {
	indoor: "This room requires to be built indoors and you must pick a structure type.",
	walls: "Auto build walls around room.",
	door: "Places doorways on walls. Needed to make the room reachable. Doorways decrease insulation, but too little will make entering the room difficult.",
},
view.sett.ui.room.construction.SShape: {
	Expand: "Expand Room. Items can only be placed on the designated room area.",
	ExpandOver: "Expand Room Over Structures",
	Shrink: "Shrink Room",
},
view.sett.ui.room.construction.SStats: {
	expense: "The room does not have enough support as indicated by yellow tiles. It can be built, but will require extra materials and maintenance. Shape the room thinner, or remove room tiles in the center to allow for more support and less costs.",
	isolation: "The room will be poorly insulated, and maintenance need will be higher as a consequence. Toggle the automatic building of walls, and use as few doorways as possible to improve it.",
},
view.sett.ui.room.ModuleDegrade: {
	DEGRADE_AVE: "Average degradation amongst these rooms. Degradation affects a room negatively.",
	RoomType: "Room Type",
	Lock: "The technology for the room is locked, and it can't be maintained.",
	badIsolation: "Room is poorly insulated!",
	maintenance: "Required Maintenance (year)",
},
view.sett.ui.room.ModuleEmployment: {
	EMPLOYEES_DESC: "Actual employees / Target Employees. When you set the target, unemployed people will soon sign up and start working the room. Without sufficient workers, or if subjects are prevented from working due to priorities, a room will perform poorly. The worker amount isn't fixed. It can vary greatly depending on how the room is laid out, and how well your city is planned. The tool-tip when creating a room will offer a guess of many workers will be required in an average city.",
	WORKLOAD_LOW: "Workload is low",
	SHIFT_START: "What time the work shift starts.",
	SHIFT_NIGHT: "This room is employed all hours of the day.",
	WORKERS_INC: "Workers +{0}",
	WORKERS_DEC: "Workers -{0}",
	WORKERS_NONE: "Insufficient workers available. If there are idle subjects, these will soon sign up and start working.",
	WORKERS_INSUFFICIENT: "Insufficient workers allocated.",
	WORKERS_INSPECT: "Inspect",
	AUTO: "Auto Employ",
	AUTO_DESC: "Let the AI adjust worker amount each day based on workload.",
},
view.sett.ui.room.ModuleIndustry: {
	Production: "Production",
	ProductionDesc: "The amount that is estimated to be produced each day. The actual production can vary greatly depending on a number of factors.",
	Consumption: "Consumption",
	ConsumptionD: "Estimation of how many resources are consumed each day.",
	Recipes: "Change Recipe",
	RecipesWarning: "Note that changing recipe will reset the room.",
	ProducedDay: "Produced today",
	ProducedYesterDay: "Produced yesterday",
	ProducedNow: "Produced This Year",
	ProducedEstimate: "Estimated this year",
	ProducedPrevious: "Produced last year",
	ConsumedDay: "Consumed today",
	ConsumedNow: "Consumed This Year",
	ConsumedYEsterday: "Consumed Yesterday",
	ConsumedPrevious: "Consumed last year",
	NoStore: "Internal storage is full and production is stalled. Have a warehouse fetch the produce.",
},
view.sett.ui.room.ModuleInstance: {
	ACTIVATE: "Activate",
	DEACTIVATE: "Deactivate",
	UNREACHABLE: "Room is not reachable and will not work properly. Make sure there is a clear path to your throne.",
	DEACTIVATED: "Deactivated!",
},
view.sett.ui.room.ModuleIrrigated: {
	Desc: "Fresh Water access gives a boost to this room. Fresh water can be gained from natural bodies of water and canals. This room needs to be covered by {0}% Fresh Water to get a full boost. Current coverage is {1}%, resulting in a {2}% value. This value might take awhile to adjust to reality.",
},
view.sett.ui.room.ModulePumpable: {
	Name: "Water Supply",
	Desc: "Water Supply is gained from adjacent canals and drains that are connected to pumps.",
	Preasure: "Pressure required per tile:",
},
view.sett.ui.room.ModuleRadius: {
	NAME: "Radius",
	PROBLEM: "No work is within the radius!",
	DESC: "Set the work radius of this room. Subjects will look for work within the radius. A big radius can be ineffective and workers will have a hard time getting back to services when work is done.",
},
view.sett.ui.room.ModuleService: {
	NO: "No Available Services",
	AVAILABLE: "Available Services",
	USED: "Currently Used",
	NEEDS: "Needs Work",
	TOTAL: "Total",
	QUALITY: "Quality",
	ACCESS: "The overall access of your minions",
	USAGE: "Service",
	Load: "Load",
	Capacity: "Capacity",
	CapacityD: "An rough estimate of how many subjects that can be served.",
	USAGE_DESC: "The highest load of this service during a day. Once full, it means there aren't enough services to meet your subjects demands. If low, it's an indication you can cut down on this service.",
	RADIUS: "Radius",
	RADIUSD: "All services operate within a radius. The radius is the max distance a subject is prepared to walk to get to a service.",
},
view.sett.ui.room.ModuleUpgradable: {
	UPGRADE_ALL: "Upgrade all",
	UPGRADE_ALL_DESC: "Upgrade all rooms once. Upgrading a room significantly increases performance. It costs a lot of resources initially that will be deducted from warehouses, and also in maintenance over time.",
	UPGRADABLE: "Upgradable:",
	UPGRADE: "Upgrade",
	UPGRADE_MAX_REACHED: "Maximally Upgraded.",
	DOWNGRADED: "Downgrade this room. All resources will be lost.",
},
view.sett.ui.room.prints.PlacerSave: {
	not: "A room that can be furnished must be selected.",
},
view.sett.ui.room.prints.UISavedPrints: {
	title: "Room Blueprints",
},
view.sett.ui.room.UIPanelMain: {
	emp: "Employed",
	oddjobbers: "Oddjobbers",
	title: "workforce & rooms",
},
view.sett.ui.room.UIPanelWorkPrio: {
	MasterPrio: "Master Priority",
	MasterPrioD: "When subjects are assigned to workplaces, this is the master priority, and the highest will be filled first. Each workplace will be filled according to the species priorities.",
	Adjust: "Adjust all by 1.",
	Work Priorities: "Work Priorities",
	SortW: "Set all priorities based on work skill.",
	SortF: "Set all priorities based on fulfillment.",
	clear: "Set all priorities to default.",
},
view.sett.ui.room.UIPanelWorkTools: {
	level: "Current Available Max Level:",
},
view.sett.ui.room.UIRoom: {
	delete: "Are you sure you want to delete this room?",
	ActivateDesc: "Turn on/off activity for this room.",
	Refurnish: "Refurnish Room. WARNING: All room progress will be lost and all employees fired.",
},
view.sett.ui.room.UIRoomRaceAssign: {
	name: "Assign work groups",
	desc: "Lets you specifically hint where certain races and classes should prioritize to work.",
	prob: "Must be placed on a workplaces.",
	everyone: "Set priority for everyone",
	none: "Set priority for none",
	permission: "Set priority for:",
	permissionAll: "Set priority for All:",
},
view.sett.ui.room.UIRooms: {
	reconstructPrompt: "Do you wish to refurnish this room? Some progress of the current construction will be lost.",
},
view.sett.ui.room.UIRoomTable: {
	ReallyDelete: "Delete room?",
	DeleteRoom: "Delete Room",
	NrOfRooms: "Number of Rooms",
	Bulk: "Bulk",
	Showing: "Showing",
	level: "Current Available Max Level:",
},
view.sett.ui.standing.CatAccess: {
	PreferedBy: "Preferred By:",
	Allowed: "Allowed to consume",
	AllowedNot: "Not allowed to consume",
	Yearly: "{0} per item per year, estimation: -{1} in total per year.",
	FurnitureD: "The amount allowed to furnish a subject's home. More allowed and available will increase happiness from furnishing.",
},
view.sett.ui.standing.CatGovern: {
	name: "Government",
	manageLaw: "Manage Law",
},
view.sett.ui.standing.CatOccupation: {
	WorkPrio: "Work Priorities",
	Educate: "Educate",
},
view.sett.ui.standing.CatPopulation: {
	age: "Age {0} to {1} : {2} Subjects",
	immi: "Aspiring Immigrants",
	Athorize: "Authorize",
	Auto: "Auto",
	AutoDesc: "Automatically authorize new immigrants up until this amount.",
	ageAverage: "Average Age:",
},
view.sett.ui.standing.CatReligion: {
	Burrial: "Burial",
	AllowRace: "Allow/deny access for Species",
	Allow: "Allow/deny access for whole class",
	TempleBoost: "Temple Boosts",
},
view.sett.ui.standing.CatServices: {
	Other: "Other Services",
},
view.sett.ui.standing.decree.DPanel: {
	Cancel: "Click to cancel action for {0} subjects.",
	Set: "Set action for:",
	Projected: "Projected fulfillment increase",
},
view.sett.ui.standing.decree.UIDecreeButt: {
	title: "Decrees",
	desc: "Options for a ruler to increase fulfillment.",
},
view.sett.ui.standing.UICitizens: {
	all: "All",
},
view.sett.ui.subject.SInfo: {
	title: "Set Punishment",
	cancel: "Cancel manually assigned punishment, and let it be decided by your law settings.",
},
view.sett.ui.subject.SInfoActions: {
	rename: "Rename subject.",
	Elevate: "Elevate.",
	NobleOk: "Click to elevate this subject into a position of power.",
	NobleSure: "Are you sure you wish to elevate this subject to the rank of noble?",
	NobleNo: "Your status determines how many nobles you can elevate. To elevate more, you must increase your status level.",
	NobleAlready: "This subject is already a noble one.",
	workplace: "Go to workplace",
	ActionNotFor: "Action not available for:",
	ActionMarked: "The subject is marked for this action, but the action has not yet been consummated. Make sure the requirements of the action are fulfilled, and give it some time.",
	ActionConsumed: "This action has been consumed. Its effect will last for a few days while tampering off.",
	ActionCantBe: "Action can currently not be performed.",
},
view.sett.ui.subject.SInfoPortrait: {
	resource: "Carried resource",
},
view.sett.ui.subject.SProblem: {
	ProblemSick: "Currently ill with {0}. Needs to recuperate.",
	ProblemSick2: "Currently ill with {0}. Needs a hospital.",
	ProblemInjured: "Bleeding badly",
	Starving: "Starving to death.",
	CutOff: "Cut off from the throne.",
	Exposed: "Exposed to the temperature!",
	OnStrike: "On Strike, refuses to work",
	ProbLeisure: "Leisure Time.",
},
view.sett.ui.subject.SProperties: {
	percPerDay: "Increase per day: {0}% / day",
	services: "Related Services",
	need: "Current Need",
	Tasks: "Tasks",
	noModule: "This type of subject does not engage in this activities",
	serviceDesc: "When a subject has spare time, they want to consume services. This is how frequently they'll generally visit services that cater to this need per year.",
},
view.sett.ui.subject.UIHoverer: {
	Sentenced: "Sentenced to be:",
	ClickToChange: "Click to change punishment.",
	JudgedNo: "Pleads innocence. Wants to try case in court.",
	Judged: "Has been found guilty in a court.",
	Attraction: "Attraction",
	Service: "Service",
	none: "---",
},
view.sett.ui.subject.UISubject: {
	race: "Read up about current race in the tome of knowledge.",
	favourite: "Mark as favourite",
	follow: "Center screen at subject.",
},
view.tool.PlacableMessages: {
	SOLID_BLOCK: "Must be placed on non-solid tiles.",
	ROOM_BLOCK: "Must not be placed on room.",
	ROOM_MUST: "Must be placed on room.",
	MISC: "Blocked by something.",
	STRUCTURE_BLOCK: "Blocked by structure. Dismantle it first.",
	ROCK_MUST: "Must be placed on rock.",
	TREE_MUST: "Must be placed on tree.",
	WATER_MUST: "Must be placed on water.",
	WATER_RETURN: "Water can only be dug where there is ground water.",
	MOUNTAIN_MUST: "Must be placed on solid mountain.",
	MOUNTAIN_NOT: "Can't be placed on mountains or caves. Use mountain specific tools for this.",
	STRUCTURE_CLEAR: "Must be placed on structures. Walls, ceilings, fortifications or roads.",
	ROAD_ALREADY: "Road already exists there.",
	JOB_BLOCK: "Blocked by other job.",
	JOB_MUST: "Must be placed on jobs.",
	BROKEN_MUST: "Must be placed on broken walls or rooms.",
	CAVE_MUST: "Must be placed on a cave.",
	MAX_REACHED: "Max reached!",
	MAX_SIZE_REACHED: "Max size reached!",
	MAX_DIMENSION_REACHED: "Max dimension reached!",
	TERRAIN_BLOCK: "Blocked by terrain!",
	NOT_EDIBLE: "Must be placed on edible vegetation!",
	NOT_RIPE: "Edible vegetation must be ripe (Late Summer)!",
	IN_MAP: "Must be placed within map!",
	ONE_CLEAR_TILE: "Needs at least 1 unblocked tile.",
	SAME_REGION: "Needs to be in the same region.",
	REGION: "Must be placed in a region!",
	BLOCKED: "Blocked!",
	BLOCK_WILL: "Will block other tile!",
	BLOCKED_WILL: "Will be blocked by other tile!",
	ROOM_OR_STRUCTURE_MUST: "Must be placed on rooms or structures!",
	ITEM_MUST: "Must be placed on items!",
},
view.tool.PlacableMultiTool: {
	type: "type",
},
view.tool.PLACER_TYPE: {
	rectangle: "rectangle",
	hollow rectangle: "hollow rectangle",
	brush: "brush",
	line: "line",
	ellipse: "ellipse",
	hollow ellipse: "hollow ellipse",
	hollow hexagon: "hollow hexagon",
	hexagon: "hexagon",
	fill: "fill",
},
view.tool.ToolPlacer: {
	Close: "Close",
},
view.ui.battle.UIDivHoverer: {
	NewConscripts: "Conscripts are training and will be ready in {0} days.",
	NewConscriptsProblem: "There are no conscripts to train for this division.",
	Training: "This division is currently training to reach the desired training level. Days left: {0}.",
	NotMustering: "This army is currently not mustering, and will not train conscripts.",
},
view.ui.battle.UIDivStats: {
	Config: "Configuration",
},
view.ui.diplomacy.UIDealConfig: {
	offer: "Offer",
	demand: "Demand",
},
view.ui.diplomacy.UIDealList: {
	YouGet: "You get",
	FactionGets: "{0} Gets",
},
view.ui.diplomacy.UIDealListSaved: {
	YouGet: "We Give you",
	FactionGets: "You give us",
},
view.ui.diplomacy.UIDipMessDeal: {
	noLonger: "This offer is no longer valid.",
	accepted: "You have accepted this offer.",
	declined: "You have declined this offer.",
	Time: "Inform us of your decision within a day.",
	AcceptD: "Accepting this offer will change the faction's opinion of you by:",
	DeclineD: "Declining this offer will change the faction's opinion of you by:",
	Exp: "The agreement has expired.",
	Power: "Since this agreement was drafted too much has changed.",
	Inspect: "Inspect Faction.",
},
view.ui.economy.RRow: {
	Imports: "Imports",
	Exports: "Exports",
	Lowest: "Lowest",
	Highest: "Highest",
	Unit: "Unit",
},
view.ui.economy.UITreasury: {
	unused: "Show resources not actively traded",
	import: "Show resources that are imported.",
	export: "Show resources that are exported.",
	economy: "Economy & Trade",
},
view.ui.goods.UIGoods: {
	Name: "Goods",
},
view.ui.goods.UIGoodsExport: {
	name: "Export Settings",
	special: "Special Orders",
	Capacity: "Export Capacity",
	CapacityDesc: "The current stock of your export depots. These goods will be bought by a trade partner that offers the highest price, if one exist.",
	priceCapD: "The minimum price you are willing to sell this resource for.",
},
view.ui.goods.UIGoodsImport: {
	name: "Import Settings",
	Best: "Best",
	BestD: "Make a custom order of this resource from the trade partner with the most favourable price.",
	Closest: "Closest",
	ClosestD: "Make a speedy custom order of this resource from the trade partner that is closest.",
	Stockpile: "Current warehouse stock:",
	Capacity: "Import Capacity",
	CapacityDesc: "The available space of your import depots for import and tribute. When trading with factions, you can only buy according to your available space.",
	priceCapD: "The maximum price you are willing to pay for this resource.",
	minCreds: "Minimum Treasury.",
	minCredsD: "The minimum credits needed before a purchase is undertaken.",
	LevelDesc: "Your import level dictates how much that will be imported based on your warehouse stock. Wares will be delivered to import depots from selling factions, which might take time. If you are short on money, or lacking depot space, nothing will be imported. If you have no warehouse space, yet still want to import, put this setting on maximum.",
	LevelEverything: "100% Imports maximum to fill both warehouses and import depots.",
	LevelNothing: "Never import.",
	LevelCurrent: "Import to maintain warehouse stock at {0}% of total capacity ({1} items).",
	LevelCurrentE: "You will currently import {0} additional items.",
},
view.ui.goods.UIGoodsTraders: {
	TradeYes: "You have a trade agreement with this faction, and trade is possible.",
	TradeNo: "You do not have a trade agreement with this faction. Trade is not possible.",
	Click: "Click to go to the diplomacy screen for this faction.",
},
view.ui.log.UILog: {
	name: "World log",
},
view.ui.message.Messages: {
	delete: "Delete all read messages.",
	PauseD: "When selected, pauses the game and shows this type of message upon arrival.",
	title: "Title",
	Arrived: "Arrived",
	Messages: "Messages",
},
view.ui.profile.Level: {
	Title: "{0} {1} of {2}",
},
view.ui.profile.Titles: {
	spent: "Chosen",
	NotAchiving: "Titles can not be unlocked.",
	spentD: "Whenever you start a new game, you get to choose 5 unlocked titles.",
	Locked: "Title is currently unavailable.",
	Active: "Title is currently unlocked and active.",
	Unlocked: "Title is currently unlocked. You can select it when starting a new game.",
},
view.ui.profile.UIBonus: {
	Name: "Status",
},
view.ui.raider.Current: {
	atLargeD: "This bandit is currently at large, and is contemplating their next raid on us.",
	killed: "This bandit is but a memory and was brought to justice {0}.",
	hidingD: "This bandit does not have the strength to attack us currently and will leave us alone for now.",
	distantD: "We are too insignificant and poor for this bandit to bother us.",
	raidingD: "This bandit is currently raiding you.",
	Ransom: "Ransom",
	Raids: "Raids",
},
view.ui.raider.Info: {
	defences: "Defence",
	defencesD: "The power of forces defending your city. This deters raiders.",
	armiesD: "Additional armies encamped near your city.",
	armiesD2: "Armies encamped in your realm.",
	suprise: "Possible surprise attack",
	Ransom: "Potential Ransom",
	RansomD: "The potential ransom a raider sees fit to extort you with. Based on population and credits, and lowered by raid security.",
	entry: "Attack Route",
	entryA: "Surprise!",
	entryB: "Realm",
	entryAD: "Your capitol is surrounded by regions where raiders can sneak in and surprise attack you. This makes them take more risk, and as a result, they perceive your deterrent power as low.",
	entryBD: "Raiders can't surprise attack your city directly. This is good. They must pass through your regions. This will buy you a lot of time if they choose to attack. Your regional defences and armies can deter raiders as well.",
},
view.ui.raider.List: {
	name: "Raiders",
	raiding: "Raiding",
	atLarge: "At Large!",
	killed: "R.I.P.",
	hiding: "In Hiding",
	distant: "Distant",
},
view.ui.raider.UIRaiding: {
	name: "Raiders",
},
view.ui.tech.Node: {
	Relock: "Hold {0} and click to disable this technology. The following points will be added to your frozen pool:",
	unlocked: "Unlocked",
	available: "Available",
	locked: "Locked by Requirements",
	afford: "Unable to Afford",
	workValue: "The current work value of this tech is {0}. The work value is an estimate of the gain in output you'll receive, divided by the current bonus or the industry, and the cost of the technology.",
},
view.ui.tech.Prompt: {
	Unlock: "Do you wish to unlock the following:",
	Unlock2: "For the cost of:",
	Forget: "Do you wish to forget the following technologies? 25% of the points deallocated will be frozen for some time.",
},
view.ui.tech.Search: {
	no: "No results",
},
view.ui.top.UINotifications: {
	constructed: "Regions that can be upgraded",
	siege: "Sieges",
	siegeD: "Amount of regions currently under siege",
	wrongful: "Wrongful Deaths",
	Room: "Constructed Rooms",
	RoomBroken: "Broken Rooms",
},
view.ui.top.UIPanelTop: {
	bView: "Toggle Battle Mode",
},
view.ui.tourism.Tourism: {
	goTo: "Go to next tourist",
	Permit: "Click to toggle permission for race to visit and sightsee in your city.",
	Generosity: "Generosity",
	Attractions: "Attracted by:",
	bad: "Poor",
	ok: "Mixed",
	good: "Overwhelmingly Positive",
	attracted: "Attracted (year)",
},
view.ui.Visual.ColorPop: {
	name: "Color Masks",
},
view.ui.Visual.UIProfile: {
	Name: "Player",
},
view.ui.Visual.Visual: {
	Save-Profile: "Save as Default",
	Load-Profile: "Load Default",
	fname: "Faction Name",
	rname: "Ruler Name",
	desc: "Game Desc.",
	flag: "flag",
	background: "background",
	foreground: "foreground",
	border: "border",
	pole: "pole",
},
view.ui.wiki.WIKI: {
	name: "Tome of Knowledge",
},
view.ui.wiki.WikiRace: {
	liking: "Liking",
	likingD: "Different species likes/dislikes different aspects of layout and management. Green bars indicate that the species likes the aspect, a red one represents dislike.",
	Likes: "This is liked by the race. Higher value = more fulfillment.",
	Dislikes: "This is disliked the race. Higher value = less fulfillment.",
	Mixed: "Different classes have mixed feelings about this.",
	DontCare: "This race doesn't care about this value.",
	ReligionD: "Inclination towards different religions.",
	PopulationD: "Determines a species population and location on the world map.",
	PopulationNo: "This species is not available for immigration.",
},
view.world.generator.StageCapitol: {
	name: "Place Capital",
	prompt: "Generating new terrain will reset faction and regions. Continue?",
	none: "Settling in this location is not possible.",
},
view.world.generator.StageEdit: {
	name: "Edit terrain",
},
view.world.generator.StageFinish: {
	inspectRegions: "Inspect World",
},
view.world.generator.StagePickRace: {
	title: "Select species",
	desc: "All species have unique play styles, excel at different works, and have different likes and dislikes.",
	challenge: "Initial Challenge",
},
view.world.generator.StagePickTitles: {
	title: "Select Titles",
	spent: "Pick 5 unlocked titles to boost your name.",
	YouSure: "You may still pick some unlocked titles. Start anyway?",
},
view.world.generator.StageTerrain: {
	title: "Generate Terrain",
	warning: "Regenerating terrain will reset your current world. Proceed?",
},
view.world.generator.tools.UIWorldGenerateTerrain: {
	MapType: "choose map type",
	Random: "Random",
	latitude: "latitude",
	nort: "northern",
	south: "southern",
	seed: "Random Seed",
},
view.world.generator.tools.UIWorldToolCapitolPlaceInfo: {
	climate: "{0} do not prefer climate: {1}. It will be a bit harder to please them. They like:",
	isolated: "This location is isolated. Initially you will be left alone by other factions, but there will be little opportunity for trade.",
	neigh: "You will have few of your own species nearby, which might make expanding harder in late game.",
	Water: "A spot with little fresh water will be a lot more difficult.",
	Forest: "A spot with little forest will be more difficult.",
	Minerals: "A spot without any minable resources will be more difficult.",
	Fertility: "A spot with low fertility will be more difficult.",
},
view.world.generator.WorldViewGenerator: {
	generate: "generate",
	regenerate: "regenerate",
	start: "start",
	home: "home",
},
view.world.panel.WorldViewPanel: {
	go to capital: "go to capital",
	developer tools: "developer tools",
},
view.world.ui.army.Army: {
	RecruitD: "Recruit the local soldiers. These use up the conscripts pool of your realm, and once trained they will need to be supplied with resources from your capital through the 'military supply depot'.",
	RecruitDProb: "No conscripts are available in your realm.",
	RecruitSettD: "Have your city troops join this army.",
	DisbandArmy: "Disband entire army.",
	Sure: "Are you sure you wish to:",
	DisbandDiv: "Disband {0} divisions?",
	mercenaryD: "Hiring mercenaries is instant and they equip, feed and replenish themselves. They cost credits to hire and requires credits in upkeep.",
	MoveD: "Move this division to another army. The other army must be within 3 tiles.",
},
view.world.ui.army.ArmyEdit: {
	sure: "Are you sure you wish to apply these settings to {0} divisions?",
},
view.world.ui.army.ArmyInfo: {
	MoraleDesc: "Morale is gained by keeping the army well supplied and by winning battles. Morale affects your army's performance on the battlefield.",
	HealthDesc: "Health is gained by keeping the army well supplied. Poor health will lead to desertion.",
	ConsumtionRate: "Yearly Consumption:",
	CreditsD: "The amount of money needed to upkeep this army daily.",
	SupplyD: "Supplies & Equipment are needed by some division types and artillery to function. They are shipped automatically from your supply depots in your capitol when the army is fortified in allied territory. An army stores up to 24 days of excess equipment to be used when in hostile territory.",
},
view.world.ui.army.ArmyRecruit: {
	NoMapnpower: "Insufficient Manpower!",
	Note: "NOTE: once a division has finished training, it will need to be supplied from your army supply depot. Without supplies, the men will desert you.",
	Time: "The amount of days it will take to train this division to specification.",
},
view.world.ui.army.UIMerenaries: {
	intro: "Captain {0}'s",
},
view.world.ui.battle.Battle: {
	battleOf: "Battle of {0}",
	battle: "Battle",
	Annihilation: "Annihilation",
	Command: "Command",
	autoD: "Auto resolve this battle. The result will be {0}. You will lose about {1} men and inflict about {2} casualties on the enemy.",
	AutoResolve: "Auto",
	defence: "This unit is defending and is given extra power due to their defensive position.",
},
view.world.ui.battle.BattleAssist: {
	desc: "Our allies are about to engage an enemy host. Do we help them, or do we stand idly by and watch?",
	CommandD: "Take personal command and fight this battle on the field. The outcome will depend on your skill of leading men into battle. Your allies might resent you if you waste their men.",
	Assist: "Assist",
	assistD: "Partake in this battle but let your allies command it. The result will be {0}. You will lose about {1} men and inflict about {2} casualties on the enemy.",
	Annihilation: "your annihilation",
	Decline: "Decline",
	DeclineD: "Decline to partake in this conflict and spare your men and the enemy at the expense of your allies.",
},
view.world.ui.battle.BattleBattle: {
	RetreatCant: "Your forces are trapped, they can't retreat.",
	RetreatD: "Make a tactical retreat. Your allies will not engage, but your commanding force will move out of harms way. In doing so you will lose {0} men and some equipment in the process.",
	desc: "Our mighty forces are about to engage an enemy host. What are your orders?",
	commandDD: "Take personal command and fight this battle on the field. The outcome will depend on your skill of leading men into battle. Your allies might resent you if you waste their men.",
	Retreat: "Retreat",
},
view.world.ui.battle.BattleLastStand: {
	name: "The Last Stand of {0}",
	desc: "The enemy is about to take the city! Some of the defenders implore you to lead them in a sally, either to disperse the besiegers or to die with honour.",
	CommandD: "Take personal command and fight this battle on the field. The outcome will depend on your skill of leading men into battle.",
	Retire: "Decline",
	RetireD: "Let the garrison fend for themselves and die in the defence of the city.",
},
view.world.ui.battle.BattleSally: {
	name: "The Sally of {0}",
	desc: "Our garrison is about to sally out to break the siege.",
	CommandD: "Take personal command and fight this battle on the field. The outcome will depend on your skill of leading men into battle.",
	Retire: "Fall Back",
	RetireD: "Abort the whole operation. No one will be harmed.",
},
view.world.ui.battle.BattleSiege: {
	name: "Siege of {0}",
	desc: "Our armies are at the walls of an enemy settlement. Its garrison still defiant. What are your orders?",
	Wait: "Wait",
	WaitD: "Continue the siege and wait. The fortifications of the settlement will decrease the longer you wait.",
	Lift: "Lift",
	LiftD: "Lift Siege and await its garrison and defences to crumble.",
},
view.world.ui.battle.Conquer: {
	name: "Region Captured",
	desc: "The city of {0} is captured my lord. What shall be the fate of its citizens?",
	Enslave: "Enslave",
	EnslaveD: "Line the population up and ship the healthiest specimen to the capitol as slaves",
	Plunder: "Plunder",
	Sack: "Loot",
	sackD: "Grab what we can of valuables.",
	Raze: "Raze",
	RazeD: "Let your men blow off some steam after a tough siege. Spare none, leave no stone unturned and teach this settlement a lesson that will be remembered for generations.",
	Occupy: "Occupy",
	Abandon: "Abandon",
	Puppet: "Puppet",
	OccupyD: "Take full control of this region.",
	AbandonD: "Let this settlement find its future on its own.",
	PuppetP: "Currently, there are no nobles available that can take on the job of governing the region.",
	PuppetD: "Install a puppet regime. A new faction will be created, which will be long indebted to you.",
},
view.world.ui.battle.Res: {
	Victory: "Victory",
	victoryD: "The gods have smiled upon your name. Victory is ours and our foe has been beaten.",
	Retreat: "Retreat",
	RetreatD: "Our army has retreated to fight another day.",
	Defeat: "Defeat",
	DefeatD: "A dark day in the annals. The enemy has snatched victory from us.",
	RetreatDefeat: "Our army attempted to retreat, but was destroyed in the process.",
	Capture: "Capture",
	CaptureD: "Ship the selected captives to your capital.",
	Execute: "Execute",
	ExecuteD: "Execute the selected captives.",
	Release: "Release",
	ReleaseD: "Have mercy and release all captives. Surely they will never bear arms against you again?",
	eret: "Enemy Retreats",
	eretD: "Enemy forces trembled before our might and ran before any engagement. We managed to hunt some down and plunder their baggage train.",
},
view.world.ui.camps.CampInfo: {
	notFull: "Fulfill this species requirements to unlock the help of the havens that are within your realm.",
	full: "The requirements have been met and the havens on your lands are at your service.",
	Replenish: "Replenish",
	unlocked: "This haven is on your lands and at your service.",
	onLands: "This haven is on your lands, but the requirements are not met for them to join your cause.",
	distant: "This haven is not on your lands and can not serve you.",
},
view.world.ui.faction.Court: {
	Heir: "First Heir",
	Heir2: "Second Heir",
	Heir3: "Third Heir",
	EDesc: "By clicking a royalty you can allocate emissaries to them to perform different actions.",
},
view.world.ui.faction.Goods: {
	productionD: "The rate at which this faction produces the resource.",
	priceSell: "The base buy price is proportional to the amount of the resource a faction has stored, and the money it has available.",
	priceBuy: "The base sell price is proportional to the amount of the resource a faction has stored, and the money it has available. If a faction has scant use for a resource, the buy price will be significantly lower than the sell price.",
	penaltyD1: "Toll is the distance to this faction. This penalty can be decreased by building roads in your kingdom.",
	penaltyD2: "The tariff penalty is based on the faction's opinion of you. Increase their opinion for better prices.",
	tradeAmount: "Tradable",
	tradeAmountD: "How much can be traded fairly with this faction before it increases tariffs.",
},
view.world.ui.faction.Hoverer: {
	powerD: "The power of this faction compared to you. The power is a mix of military might and production capabilities. High powered factions are harder to please.",
	poisioning: "This faction hates you to a degree that it is poisoning all other factions against you. You should try to appease this faction with a gift.",
},
view.world.ui.faction.UIDiplomacy: {
	What: "What do you wish to offer us?",
	Barter: "Barter",
	BarterD: "Allow the Faction to compose a deal that they feel comfortable with based on your demands.",
	desc: "The value of a deal is weighed by the faction's perception of the value of its components. A deal needs to have a possible value in order to go through. A high positive value indicate generosity on your part, and will increase the faction's opinion of you.",
	Accept: "The deal will be accepted",
	AcceptNo: "The deal will not be accepted",
	OpinionD: "The change of opinion of the faction's ruler if this deal is accepted.",
	No: "You have nothing of worth to offer the faction.",
},
view.world.ui.faction.UIRoyalty: {
	Personality: "Personal Importance:",
},
view.world.ui.region.ListAll: {
	search: "search",
	Regions: "Regions",
},
view.world.ui.region.MiscBasics: {
	fertilityD: "Fertility can increase production of buildings and determines how many subjects the region can support.",
	areaD: "The size of the region along with the fertility determines how many subjects it can support.",
	worth: "Worth",
	worthD: "How much the other factions think this region is worth. This counts towards your rivalry.",
},
view.world.ui.region.Other: {
	eCurrent: "Assigned envoys",
	eAvailable: "Available envoys",
},
view.world.ui.region.OtherHov: {
	Besieged: "Besieged!",
},
view.world.ui.region.PlayBuildings: {
	Click: "Click to construct buildings.",
},
view.world.ui.region.PlayBuildingsPop: {
	RemoveAll: "Remove all constructed buildings?",
	Constructed: "This building has been constructed.",
	ConstructedUp: "This building can be upgrades.",
	Available: "This building can be constructed.",
},
view.world.ui.region.PlayInfo: {
	abandon: "Abandon Region",
	abandonQ: "Do you wish to abandon this region? It will be turned over into the hands of rebels.",
	autonomy: "Give Autonomy",
	autonomyD: "Do you wish to give this region autonomy and bestow upon it self-rule? The new faction will be in your dept.",
	autonomyE: "No royalties are available to govern the region at the moment.",
},
view.world.ui.region.PlayOutput: {
	ship: "This resource is shipped annually after harvest. Harvest is in {0} days.",
},
view.world.ui.region.PlayPop: {
	eWarning: "Enabling an edict has a global effect in your whole kingdom. The affected race will have their loyalty decreased in all regions.",
},
view.world.ui.region.PlayToolAttack: {
	noSoldiers: "Region has no soldiers to attack with.",
	noRange: "Can't use garrison to attack outside of the region borders.",
	def: "Select an army within your regions' borders to attack.",
	question: "Are you sure you wish to declare war on {0} and attack {1} with your garrison?",
	besiged: "All exits are blocked. Can only sally out and attack the besieging army.",
},
world.army.ADStats: {
	Wins: "Victories",
	Defeats: "Defeats",
	kills: "Enemies Killed",
	losses: "Casualties",
	SiegeWon: "Sieges Won",
	WinsD: "Total amount of victories.",
	DefeatsD: "Total amount of defeats.",
	killsD: "Total amount of enemies killed.",
	lossesD: "Total amount of casualties sustained.",
	SiegeWonD: "Total amount of sieges won.",
	reputation: "Reputation",
	reputationD: "Based on previous and recent victories and defeats. Affects morale on the battlefield.",
	mercy: "Mercy",
	cruelty: "Cruelty",
},
world.army.ADSupplies: {
	Starving: "Supplies low!",
	StarvingD: "Essential supplies have not been delivered to our army, affecting health. Low health will stop training of new recruits and cause deaths and desertion. Fill up our military depots and fortify the army immediately. Affected army: {0}.",
},
world.army.ADUpdater: {
	Desertion: "Desertion!",
	DesertionD: "Army supplies are low, and as a result {0} soldiers have deserted from {1}.",
},
world.army.util.Power: {
	desc: "The overall power of a battle unit. Divided into different attack and defence types. The total power is an indication of how well the unit will perform in a fight, but in practice each type determines the outcome.",
},
world.army.WDivMercenaries: {
	mWTitle: "Mercenaries Displeased!",
	mWBody: "We are running low on Denari and can't pay our mercenaries. We need at least {0} additional Denari to ensure their loyalty.",
	mTitle: "Mercenaries leaving!",
	mBody: "Since you don't have enough credits to pay them, your hired mercenaries are leaving you.",
},
world.battle.BattleListener: {
	siege: "{0} forces have taken control of {1}.",
	battle: "An army of {0} defeated an army of {1} near {2}.",
},
world.battle.PSiege: {
	name: "Besieged",
	desc: "The city of {0} have been besieged by our enemies!",
},
world.battle.Util: {
	lost: "Settlement lost!",
	lostC: "Region of {0} has fallen to our enemies.",
	factionMove: "Capital Relocated",
	factionMoveD: "The faction of {0} has moved its capital. Its people still resist.",
},
world.entity.army.WArmyState: {
	siege: "Are you sure you wish to besiege {0} and declare war on the faction of {0}?",
},
world.entity.haven.Player: {
	titleNew: "Haven controlled",
	bodyNew: "We now have under our control a haven. Havens are bastions containing powerful races that you can sway to your cause if you fulfill their requirements.",
	titleMore: "More {0} join you",
	bodyMore: "Since your worth has increased in the eyes of your {0}. More are willing to join your cause. Make sure you accept them as immigrants.",
	titleLess: "{0} are leaving!",
	bodyLess: "Since you've failed to uphold the standards of your {0} havens, many have now stopped supporting you, and all its members will start to return home.",
},
world.entity.haven.WHavens: {
	Havens: "Havens",
	HavenD: "Havens are smaller settlements that contain individuals of a specific race. They are independent, but can join a faction if their criteria are met and the faction controls the region in which they are located.",
},
world.log.WorldLog: {
	war: "The {0} declares war on {1}",
},
world.map.buildings.Placer: {
	name: "village",
},
world.map.landmark.GeneratorLandmarkValidator: {
	error: "This landmark does not have a connected body. Landmarks must be connected. Landmark:",
},
world.map.landmark.WorldLandmarks: {
	name: "Landmark",
},
world.map.regions.GenValidator: {
	error: "The player capital can not reach all of the world map. Ships can not depart or enter from the player capital.",
},
world.map.regions.Placer: {
	name: "Place Player",
},
world.map.terrain.GeneratorValidator: {
	noRoom: "There is no room for a single settlement on the map. Make sure there is at least one 3x3 area where a city can be.",
	notConnected: "This area is isolated by the terrain. Make sure there is an open path to this place.",
},
world.overlay.OverlayDiplomacy: {
	name: "Diplomacy",
	desc: "Shows a clear view of factions and their loyalty towards you.",
},
world.overlay.OverlayFaction: {
	name: "Factions",
	desc: "Shows a clear view of factions.",
},
world.overlay.OverlayMineral: {
	name: "Minerals",
	desc: "Shows the location of minerals.",
},
world.overlay.OverlayPathing: {
	name: "Paths",
	desc: "show available paths",
},
world.region.building.Creator: {
	prospect: "Prospect",
	desc: "Produces",
	small: "(Small)",
	large: "(Large)",
	awesome: "(Awesome)",
},
world.region.building.RDBuilding: {
	NotEnough: "Not enough",
	Requirement: "Requirements not met",
},
world.region.pop.RDEdicts: {
	Distant: "Distant",
	Prosecute: "Persecution",
	ProsecuteD: "Persecuting a species severely diminishes growth and decreases happiness.",
	Exile: "Exile",
	ExileD: "Forbid this species from immigrating and sends off any citizens to neighbouring regions where they are still welcome.",
	Massacre: "Massacre",
	MassacreD: "Commit genocide and instantly rid yourself of this species. Will cause an outrage of course, make sure you have enough military presence to handle an eventual uprising.",
},
world.region.pop.RDRace: {
	PopulationTarget: "Pop. Target",
	RulingSpecies: "Ruling Species",
	Biome: "Species Biome",
	Armies: "Army presence",
	Representation: "Representation",
},
world.region.pop.RDRaces: {
	Loyalty: "Loyalty",
	LoyaltyD: "Current Loyalty. Loyalty determines the chance of rebellion. Loyalty changes slowly based on the target. Increase loyalty by allocating admin points into loyalty boosting areas. Loyalty will also increase the longer a region has belonged to you. Loyalty is species specific.",
	RegionCapacity: "Region Capacity",
	RegionCapacityD: "Region Population capacity.",
},
world.region.RD: {
	regChange: "{0} changes master from {1} to {2}.",
},
world.region.RDDevastation: {
	Name: "Devastation",
	Desc: "Devastation comes from military actions. Devastated regions produce less, and have slower population growth. Devastation takes 2 years to subside.",
},
world.region.RDDistance: {
	Name: "Proximity",
	NameD: "Proximity is the physical distance from a region to your capital. It determines the amount tribute you receive from it and the loyalty of its subjects.",
	Distance: "Distance",
	DistanceD: "Distance to your capital. Distance affect trade prices.",
},
world.region.RDHealth: {
	name: "Health",
	desc: "Health must be maintained at over 50% in a region, else there is a risk of disease.",
	pos: "You have health moving towards more than 50% and need not fear an outbreak of disease.",
	neg: "You have health plummeting  below 50%, and an outbreak of disease is to be expected.",
	out: "This region is currently suffering from an outbreak of disease. You must increase health quickly.",
	epidemic: "Outbreak",
	epidemicD: "The region of {0} has suffered from low health and as a result there has been an outbreak of disease. While the epidemic is lasting, the region will suffer big penalties across the board. You must increase the health to over 50% in order to save the settlement.",
},
world.region.RDMilitary: {
	garrisonD: "Troops that are stationed in a region which will defend it against attacks.",
	conscriptD: "Conscripts are candidates that can be trained into soldiers.",
},
world.region.RDOutputs: {
	taxes: "Taxes",
	taxRate: "Tax Rate",
	taxD: "Taxes are generated from your subjects. Higher tax rate increases taxes, but decreases loyalty.",
},
world.region.RDOwner: {
	Affiliation: "Support",
	AffiliationD: "Support towards your majesty. Low support increases the chance of rebellion. When a region is controlled, support will increase with time. For other regions, emissaries can be sent to increase support.",
},
world.region.RDReligions: {
	Opposition: "Religious differences",
},
world.WorldMinimap: {
	painting: "Painting world minimap",
},
menu.GUI: {
	back: "< back",
},
menu.Intro: {
	greeting: "HAIL MIGHTY DESPOT!",
	0: "You are about to enter the world of Syx.",
	1: "",
	2: "This game is still in active development and some features might be changed, removed or added.",
	3: "If you're a pirate, no one will come after you. But when times are good, consider a purchase!",
	4: "Suggestions and feedback are welcome.",
	5: "Beware, if you are using mods, you play at your PC's own risk.",
	6: "",
	7: "May the Astari guide your hand to swift victory...",
},
menu.ScCampaign: {
	name: "campaigns",
	go: "go!",
},
menu.ScCredits: {
	name: "credits",
},
menu.ScCreditsFame: {
	name: "hall of fame",
	nobility: "nobility",
	knights: "knights",
	citizens: "citizens",
},
menu.ScLoad: {
	showCases: "showcases",
	custom: "custom games",
	battles: "battles",
},
menu.ScMain: {
	continue: "continue",
	quit: "quit",
	play: "play",
	scenario: "scenario",
	editor: "editor",
},
menu.ScOptions: {
	name: "settings",
	revert: "revert",
	default: "restore",
},
menu.ScRandom: {
	name: "random game",
	normal: "normal",
	easy: "easy",
	hard: "hard",
	titleDisabled: "Title unlocking will be disabled.",
	Scripts: "Scripts",
	Difficulty: "Difficulty",
	go: "go!",
},
launcher.ScreenInfo: {
	Version: "Version",
	Platform: "Platform",
	JRE: "JRE",
	GPU: "GPU",
	GPU-Driver: "GPU-Driver",
	localF: "Local Files",
	Saves: "Saves",
	Screenshots: "Screenshots",
	Mods: "Mods",
	Contact: "Contact",
	Road-map: "Road-map",
	Back: "Back",
},
launcher.ScreenLang: {
	Back: "Back",
},
launcher.ScreenLog: {
	Change-Log: "Change-Log",
},
launcher.ScreenMain: {
	Launch: "Launch",
	Settings: "Settings",
	Info: "Info",
	Exit: "Exit",
},
launcher.ScreenMods: {
	Outdated: "Outdated",
	Author: "Author",
	mborked: "Unsupported Mod",
	Play: "Play",
	Back: "Back",
	Mods: "Mods",
},
launcher.ScreenModWarning: {
	warn: "You are about to launch the game with code mods enabled. These mods contain code that could harm your PC, and you play at your own risk. Make sure you trust the author and the source of the mod.",
	launch: "Launch",
	cancel: "Cancel",
},
launcher.ScreenSetting: {
	Back: "Back",
	Debug: "Debug",
	debugD: "Starts the game in debug mode and will print extra information and diagnostics when enabled at the cost of performance. Helpful when modding.",
	Developer: "Developer",
	DeveloperD: "Enables powerful tools in game that can be used to test things, or cheat.",
	Linear: "Linear",
	LinearD: "Enables linear filtering when the game is scaled.",
	RPC: "RPC",
	RPCD: "Enables rich presence, that will send out information to other applications such as discord about your game for others to see.",
	Shading: "Shading",
	ShadingD: "Use normal maps and dynamic lightening",
	VSync: "VSync",
	VSyncD: "Enables vsync to reduce screen tearing. Can cause conflicts with NVidia GSync in which case it's recommended to turn that off.",
	VSync-Adapt: "VSync-Adapt",
	VSyncAD: "Enables vsync that adapts to the current refresh rate. Only supported on some GPUs",
	Iconify: "Iconify",
	IconifyD: "If full screen is selected, allow the window to iconify if it looses focus. When using multiple monitors, this should be turned off.",
	W-Fix: "W-Fix",
	MFixD: "A possible fix for borderless window and tabbing out if you have multiple monitors.",
	W-Float: "W-Float",
	WFloatD: "Determines how the window floats on top of other applications. Might work different on different configurations.",
	UI-Easy: "UI-Easy",
	UI-EasyD: "Only works with the default english language. Replaces the fonts with open sans, and tweaks UI colors to make things more clear.",
	none: "none",
	default: "default",
	Audio: "Audio",
	audioD: "What audio device to use. If empty, the game can not find a device with openal support. Try fiddling with headphones and jacks if you have a problem.",
	Screen: "Screen",
	ScreedD: "The type of display to be created for the game.",
	Borderless: "Borderless",
	Full: "Full",
	Windowed: "Windowed",
	Monitor: "Monitor",
	MonitorD: "Which monitor to start the game in.",
	Resolution: "Resolution",
	ResolutionD: "What resolution to use in full screen mode",
	Width: "Width",
	widthD: "The width of the window",
	Height: "Height",
	HeightD: "The height of the window",
	Borders: "Borders",
	BorderD: "Use borders and system decoration on the window",
	Scale: "Scale",
	ScaleD: "The scale of the game. Choose a bigger scale if the game is too small for you.",
	Reset: "Reset",
	Settings: "Settings",
},
cutscene.CutScene: {
	desc: "Hold left mouse button to skip.",
	loading: "Loading...",
},
